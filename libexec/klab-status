#!/usr/bin/env node
// TODO - compile needs to carry on the act

const fs = require("fs");
const path = require("path");
const {docopt}      = require("docopt");
const {
  testPath,
  read,
  ensureDir,
  sha3
} = require("../lib/util.js");
const { genBehaviour } = require("../lib/behavior.js");
const format = require("../lib/format.js")

const KLAB_WD_PATH = path.join(process.env.TMPDIR, "klab");
const KLAB_OUT     = process.env.KLAB_OUT || "out";

const config_json   = JSON.parse(fs.readFileSync("./config.json"));
const makeConfig        = require("../lib/config.js");

const usage = `
Usage:
  klab compile [options] <spec>
`

const cmd = docopt(usage, {
  argv: ["compile"].concat(process.argv.slice(2))
});

const config        = makeConfig(config_json, cmd["<spec>"]);

config.spec = cmd["<spec>"] && (
    testPath(cmd["<spec>"]) && read(cmd["<spec>"])
    || revert(`spec not found at ${cmd["<spec>"]}`))

config.name = cmd["<spec>"] && path.basename(cmd["<spec>"])
  || cmd["--name"] && (name + ".k")

config.rules = testPath(path.join(KLAB_OUT, "rules.k")) && read(path.join(KLAB_OUT, "rules.k"))
  || revert(`no rules found at ${KLAB_OUT}/rules.k`)

config.smt_prelude = testPath(path.join(KLAB_OUT, "prelude.smt2")) && read(path.join(KLAB_OUT, "prelude.smt2"))
  || revert(`no smt prelude file at ${KLAB_OUT}/prelude.mst2`)


const proofid = sha3(JSON.stringify({
  rules: config.rules,
  spec : config.spec,
  smt_prelude: config.smt_prelude
}));


const {
  prune_edges
} = require("../lib/compile.js");

const {pruned_edges, initt, finished} = prune_edges(proofid, {});

const blobs = Object.keys(Object.keys(pruned_edges)
  .map(ekey => pruned_edges[ekey]
    .map(e => e.from.split("_").concat(e.to.split("_")))
    .reduce((a, es) => a.concat(es), [])
  )
  .reduce((a, es) => a.concat(es), [])
  .reduce((a, blob) => {a[blob] = true; return a;}, {}))

const blobs_data = blobs
  .map(blobid => [blobid, JSON.parse(read(path.join(KLAB_WD_PATH, `${proofid}_blobs`, blobid + ".json")))])


const compiled_blobs = blobs_data
  .reduce((a, [blobid, k]) => ({...a, [blobid]: k}), {})

const finished_ = finished
  .reduce((a, node) => ({...a, [node]: true}), {});

const boot = {
  edges: pruned_edges,
  config,
  initt,
  nodes: compiled_blobs,
  finished: finished_,
  path: [{
    "type": "step",
    "count": 0,
    "step": {
      "from": "",
      "to": initt,
      "rule": ""
    }
  }]
};

const nodes_ = blobs_data
  .filter(([_, k]) => k.term.label == "<generatedTop>")

const { behaviour } = genBehaviour({
        nodes: [],
        edges: [],
        ...boot,
      });
// console.log(JSON.stringify(behaviour, false, 2));
boot.status = behaviour.success
  ? "ACCEPT"
  : "REJECT"

// console.log(JSON.stringify(behaviour, false, 2));

const styles = node => !node && 22
  || node.branching && 215
  || node.in_history && 255 // 77
  || node.active && 244
  || 234
const table = format.foldPreorder({
  tree: JSON.parse(JSON.stringify(behaviour)),
  loc: "head",
  styles
})
console.log("  " + format
  .formatDb(table, ["head", "deltaC"], styles)
  .split("\n")
  .join("\n  ")
  + "\n"
)


// const boot_json_str = JSON.stringify(boot);
// fs.writeFileSync(pruned_path, boot_json_str);
// console.log(`compiled file is: ~${Math.floor(boot_json_str.length / 10485.76) / 100} MB`);
// console.log(`saved to ${pruned_path}`);

