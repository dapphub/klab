#!/usr/bin/env node
// TODO - compile needs to carry on the act

const fs = require("fs");
const path = require("path");
const {docopt}      = require("docopt");
const {
  testPath,
  read,
  ensureDir,
  sha3
} = require("../lib/util.js");
const { genBehaviour } = require("../lib/behavior.js");
const format = require("../lib/format.js")

const KLAB_WD_PATH = path.join(process.env.TMPDIR, "klab");
const KLAB_OUT     = process.env.KLAB_OUT || "out";

const config_json   = JSON.parse(fs.readFileSync("./config.json"));
const makeConfig        = require("../lib/config.js");
const {
  prune_edges,
} = require("../lib/compile.js");

const usage = `
Usage:
  klab status [options] <hash>
`
const cmd = docopt(usage, {
  argv: ["status"].concat(process.argv.slice(2))
});

const proofid = cmd['<hash>'];

const {pruned_edges, initt, finished, steps} = prune_edges(proofid);
const finished_ = finished
  .reduce((a, node) => ({...a, [node]: true}), {});
const steps_ = steps
  .reduce((a, step) => { a[step] = true; return a; }, {});
// generate coedges
const coedges = Object.keys(pruned_edges)
  .reduce((coedges, from) =>
    pruned_edges[from]
      .reduce((a, toO) => ({...a, [toO.to]: (a[toO.to]||[]).concat(toO)}), coedges)
  , {})

const meta_path = path.join(KLAB_OUT, 'meta', 'data', proofid);
var meta = {};
if(testPath(meta_path)) meta = JSON.parse(read(meta_path))


const blobs = Object.keys(Object.keys(pruned_edges)
  .map(ekey => pruned_edges[ekey]
    .map(e => [e.from.split("_")[1], e.to.split("_")[1]])
    .reduce((a, es) => a.concat(es), [])
  )
  .reduce((a, es) => a.concat(es), [])
  .reduce((a, blob) => {a[blob] = true; return a;}, {}))

const blobs_data = blobs
  .map(blobid => [blobid, JSON.parse(read(path.join(KLAB_WD_PATH, `${proofid}_blobs`, blobid + ".json")))])

const state = {
  edges: pruned_edges,      // done: klab compile-fsm
  config: meta,
  initt,                    // done: klab compile-fsm
  finished: finished_,      // done: klab compile-fsm
  steps: steps_,
  nodes: blobs_data,
  path: [{
    "type": "step",
    "count": 0,
    "step": {
      "from": "",
      "to": initt,
      "rule": ""
    }
  }]
};

const { behaviour } = genBehaviour(state);
state.status = behaviour.success
  ? "ACCEPT"
  : "REJECT"

const styles = node => !node && 22
  || node.branching && 215
  || node.in_history && 255 // 77
  || node.active && 244
  || 234
const table = format.foldPreorder({
  tree: JSON.parse(JSON.stringify(behaviour)),
  loc: "head",
  styles
})
console.log("  " + format
  .formatDb(table, ["head", "deltaC"], styles)
  .split("\n")
  .join("\n  ")
  + "\n"
)
