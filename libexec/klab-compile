#!/usr/bin/env node
// TODO - compile needs to carry on the act

const fs = require("fs");
const path = require("path");
const {docopt}      = require("docopt");
const {
  testPath,
  read,
  ensureDir,
  sha3
} = require("../lib/util.js");
const { genBehaviour } = require("../lib/behavior.js");

const KLAB_WD_PATH = path.join(process.env.TMPDIR, "klab");
const KLAB_OUT     = process.env.KLAB_OUT || "out";

const config_json   = JSON.parse(fs.readFileSync("./config.json"));
const Config        = require("../lib/config.js");
const config        = Config(config_json);

const usage = `
Usage:
  klab hash [options]

Options:
  --spec=<spec>
`

const cmd = docopt(usage, {
  argv: ["hash"].concat(process.argv.slice(2))
});

try {
  config.out = JSON.parse(fs.readFileSync(path.join(KLAB_OUT, "out.json")))
} catch(e) {
}

config.spec = cmd["--spec"] && (
    testPath(cmd["--spec"]) && read(cmd["--spec"])
    || revert(`spec not found at ${cmd["--spec"]}`))

config.name = cmd["--spec"] && path.basename(cmd["--spec"])
  || cmd["--name"] && ("proof-" + name + ".k")

config.rules = testPath(path.join(KLAB_OUT, "rules.k")) && read(path.join(KLAB_OUT, "rules.k"))
  || revert(`no rules found at ${KLAB_OUT}/rules.k`)

config.smt_prelude = testPath(path.join(KLAB_OUT, "prelude.smt2")) && read(path.join(KLAB_OUT, "prelude.smt2"))
  || revert(`no smt prelude file at ${KLAB_OUT}/prelude.mst2`)


const proofid = sha3(JSON.stringify({
  rules: config.rules,
  spec : config.spec,
  smt_prelude: config.smt_prelude
}));

const {
  prune_edges,
  buildDisplayInfo
} = require("../lib/compile.js");

const {pruned_edges, initt, finished} = prune_edges(proofid);

const blobs = Object.keys(Object.keys(pruned_edges)
  .map(ekey => pruned_edges[ekey]
    .map(e => e.from.split("_").concat(e.to.split("_")))
    .reduce((a, es) => a.concat(es), [])
  )
  .reduce((a, es) => a.concat(es), [])
  .reduce((a, blob) => {a[blob] = true; return a;}, {}))

ensureDir(path.join(KLAB_OUT, "log"));
const pruned_path = path.join(KLAB_OUT, "log", `boot_${proofid}.json`);
const blobs_data = blobs
  .map(blobid => [blobid, JSON.parse(read(path.join(KLAB_WD_PATH, "blobs", blobid + ".json")))])

const compiled_states = blobs_data
  .filter(([_, k]) => k.term.label == "<generatedTop>")
  .map(([blobid, k]) => [blobid, buildDisplayInfo(k.term, config)])

const constraints = blobs_data
  .filter(([_, k]) => k.term.label != "<generatedTop>")

const compiled_blobs = compiled_states.concat(constraints)
  .reduce((a, [blobid, k]) => ({...a, [blobid]: k}), {})

// console.log(JSON.stringify(compiled_blobs, false, 2));

const finished_ = finished
  .reduce((a, node) => ({...a, [node]: true}), {});

const boot = {
  edges: pruned_edges,
  config,
  initt,
  nodes: compiled_blobs,
  finished: finished_,
  path: [{
    "type": "step",
    "step": {
      "from": "",
      "to": initt,
      "rule": ""
    }
  }]
};

const behaviour = genBehaviour({
        nodes: [],
        edges: [],
        ...boot
      });
// console.log(JSON.stringify(behaviour, false, 2));
boot.status = behaviour.success ? "pass" : "fail"

const boot_json_str = JSON.stringify(boot);
fs.writeFileSync(pruned_path, boot_json_str);
console.log(`compiled file is: ~${Math.floor(boot_json_str.length / 10485.76) / 100} MB`);
console.log(`saved to ${pruned_path}`);
