#!/usr/bin/env node
// TODO - compile needs to carry on the act

const fs = require("fs");
const path = require("path");
const {docopt}      = require("docopt");
const {
  testPath,
  read,
  ensureDir
} = require("../lib/util.js");
const { deltaCC } = require("../lib/constraints.js")
const kast = require("../lib/kast.js")

const KLAB_OUT = process.env.KLAB_OUT || "out";
const KLAB_WD_PATH = path.join(KLAB_OUT, "data");

const usage = `
Usage:
  klab get-x [options] <kpath> <hash>
`

const cmd = docopt(usage, {
  argv: ["get-x"].concat(process.argv.slice(2))
});
const kpath = cmd['<kpath>']
const proofid = cmd['<hash>']

if(!testPath(path.join(KLAB_OUT, "data", proofid + ".log"))) {
  console.error("klab-get-x: no logfile for " + proofid);
  process.exit(1);
}

const {
  prune_edges
} = require("../lib/compile.js");

const {pruned_edges, initt, finished} = prune_edges(proofid, false);

const if_else_fi = args => ({
  node: "KApply",
  label: "#if_#then_#else_#fi_K-EQUAL",
  variable: false,
  arity: 3,
  args: args
})
const and = args => ({
  node: "KApply",
  label: "_andBool_",
  variable: false,
  arity: 2,
  args: args
})

const minus = args => ({
  node: "KApply",
  label: "_-Int__INT-COMMON",
  variable: false,
  arity: 2,
  args: args
})


const blob = blobid => JSON.parse(read(path.join(KLAB_WD_PATH, proofid + "_blobs", blobid + ".json")));


const isMinus = (gasExpr) => gasExpr.label && gasExpr.label == '_-Int__INT-COMMON'
const isIf = (gasExpr) => gasExpr.label && gasExpr.label == '#if_#then_#else_#fi_K-EQUAL'
const isVGasMinus = (gasExpr) => gasExpr.label && gasExpr.label == '_-Int__INT-COMMON' && gasExpr.args[0].originalName == 'VGas'
const isLeaf = (gasExpr) => gasExpr.node && (gasExpr.node == 'KVariable' || gasExpr.node == 'KToken')

const getMin = g1 => {
  if (isVGasMinus(g1)) {return g1.args[1].token};
  if (isIf(g1)) {return Math.min(getMin(g1.args[1]), getMin(g1.args[2]))};
}

const removeMin = (gasExpr, min) => {
  //Transforms a leaf of the form VGas - (min + A) to just A
  if (isVGasMinus(gasExpr)) {
    gasExpr.args[1].token = (gasExpr.args[1].token - min).toString();
    return gasExpr.args[1];
  }
  if (isIf(gasExpr)) {
    return if_else_fi([
      gasExpr.args[0],
      removeMin(gasExpr.args[1], min),
      removeMin(gasExpr.args[2], min)]);
  }
}


const minimize = (g) => {
  if (isLeaf(g)) {return g}
  else if (isIf(g)) {
    if (isVGasMinus(g.args[1]) && isVGasMinus(g.args[2])) {
      return simplify(g);
    } else {
      return if_else_fi([g.args[0], minimize(g.args[1]), minimize(g.args[2])]);
    }
  } else {
    g.args = g.args.map(minimize);
    return g;
  }
}

const simplify = (gasExpr) => {
  return minus([
    minus([
      {
        "node": "KVariable",
        "name": "_", //whatever mannn
        "originalName": "VGas"
      },
      {
        "node": "KToken",
        "sort": "Int",
        "token": getMin(gasExpr).toString()
      },
    ]),
    removeMin(gasExpr, getMin(gasExpr))
  ])
}

const E = pruned_edges;
const traverse = (firstNode) => {
  var c = firstNode;
  while(c in E && E[c].length == 1) {
    c = E[c][0].to;
  }
  if (!(c in E) || E[c].length == 0) {
    return kast.get(blob(c.split('_')[0]).term, kpath)
  } else {
    const l = traverse(E[c][0].to);
//    console.log('l: '+ l)
    const r = traverse(E[c][1].to);
//    console.log('r: '+ r)
    if(l.label && l.label == "#if_#then_#else_#fi_K-EQUAL" && JSON.stringify(l.args[2]) == JSON.stringify(r)) {
      return if_else_fi([
        and([
          deltaCC(blob(E[c][0].from.split('_')[1]), blob(E[c][0].to.split('_')[1]))[0],
          l.args[0]
        ]),
        l.args[1],
        r
      ])
    }
    return JSON.stringify(l) == JSON.stringify(r)
      ? r
      : if_else_fi([
        deltaCC(blob(E[c][0].from.split('_')[1]), blob(E[c][0].to.split('_')[1]))[0], l, r
      ])
  }
}

try {
  console.log(JSON.stringify(minimize(traverse(initt))));
} catch(e) {
  console.error(e);
  exit(1);
}
