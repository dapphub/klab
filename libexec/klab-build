#!/usr/bin/env node

const fs            = require("fs");
const path          = require("path");
const marked        = require("marked");
const {docopt}      = require("docopt");
const clc           = require("cli-color");
const _             = require("lodash");
const kjson         = require("../lib/kjson.js");
const kast          = require("../lib/kast.js");
const makeConfig    = require("../lib/config.js");
const {
  makePrelude,
  makeRules,
  getActs,
  parseAct,
  buildAct
}                   = require("../lib/build.js");
const {
  read,
  testPath,
  revert,
  ensureDirs,
  warn,
  sha3
}                   = require("../lib/util.js");

const KLAB_OUT = process.env.KLAB_OUT || "out";

const usage = `
Usage:
  klab build [options] [<spec>]

Options:
  --filter=<filter>
  --trust
  --debug
  --no-oog
`
const cmd = docopt(usage, {
  argv: ["build"].concat(process.argv.slice(2))
});

if (!testPath("./config.json")) {revert("No config.json file in directory. Review `klab/examples` folder for inspiration")}
const config_json   = JSON.parse(fs.readFileSync("./config.json"));
const config        = makeConfig(config_json);
const config_path   = cmd["<spec>"] || config.src.specification;
const filter_subject= cmd["--filter"] || null;
const OOG           = !cmd["--no-oog"];
const DEBUG         = cmd["--debug"] || false;
config.DEBUG        = DEBUG;
config.trusted      = cmd["--trust"];

const raw_md_config = read(config_path)

ensureDirs([
  KLAB_OUT,
  path.join(KLAB_OUT, "specs"),
  path.join(KLAB_OUT, "acts"),
  path.join(KLAB_OUT, "gas"),
  path.join(KLAB_OUT, "meta"),
  path.join(KLAB_OUT, "meta", "name"),
  path.join(KLAB_OUT, "meta", "data")
]);





// RULES
const {rules_str, write_rules} = makeRules(config);
// prelude
const {prelude_str, write_prelude} = makePrelude(config);

const get_proof_hash = spec => sha3(JSON.stringify({
  rules: rules_str,
  spec : spec,
  smt_prelude: prelude_str
}));

const acts_str_arr = getActs(raw_md_config);


// searches and adds abi variables with "ABI_" prefix

let act_collection = acts_str_arr
  .map(parseAct(config))

// * build tests cases
// * enrich with gas conditions
// act2name
const __a2n = act => act.subject + "_" + act.name;
const __hasGas = name => testPath(path.join(KLAB_OUT, "gas", name + ".kast"));
const __getGas = name => read(path.join(KLAB_OUT, "gas", name + ".kast"));
const __getGasRaw = name => JSON.parse(read(path.join(KLAB_OUT, "gas", name + ".raw.kast.json")));

const proof_collection = act_collection
  // split into pass and fail cases
  .map(act => [{
    act: {...act},
    name: __a2n(act) + "_pass_rough",
    pass: true,
    oog: false
  }].concat("iff" in act ? [{
    act: {...act},
    pass: false,
    oog: false,
    name: __a2n(act) + "_fail"
  }] : [] ))
  .reduce((a, cs) => a.concat(cs), [])
  // enrich with gas statements
  .map(pf => {
    // TODO - default
    pf.act.hasGas = __hasGas(pf.name) && pf.pass;
    var gas = "3000000";
    if(__hasGas(pf.name) && pf.pass) {
      pf.act.gas = __getGas(pf.name);
      pf.act.gas_raw = kast.format(__getGasRaw(pf.name), true, true);
      return [{...pf, oog: false, name: pf.name.replace('_rough','')}]
        .concat(OOG && [{...pf, oog: true, name: pf.name.replace('rough','oog')}] || [])
    } else {
      pf.act.gas = gas;
      return [{...pf}]
    }
  })
  .reduce((a, cs) => a.concat(cs), [])

// {name, spec,  v2n, act, imports, pass, oog}
let act_proofs = proof_collection
  .map(buildAct(config))

// Add the imported rules from the calls field
act_proofs.forEach(rule => {
  rule.ctx = rule.imports
    .map(name =>  act_proofs.find(rul => rul.name == name));
  rule.grounded = rule.ctx.length == 0;
})

const propagate_grounded = rule => {
  if(!rule) return false;
  if(rule.ctx.length == 0) return true;
  const grounded_ctx = rule.ctx
    .map(propagate_grounded)
    .reduce((a, e) => a && e, true);
  rule.grounded = grounded_ctx;
  return grounded_ctx;
}

act_proofs.forEach(propagate_grounded);

const grounded_proofs = act_proofs
.filter(rule => rule.grounded)

// build modules
grounded_proofs
  .forEach(rule => {
      if (config.DEBUG && rule.ctx.length > 0) {console.log("Importing " + rule.ctx.map(r => r.name) + " as lemma(s) to " + rule.name)}
    const _rules = [rule.spec].concat(rule.ctx.map(r => r.spec  + "\n[trusted]\n"))
    const module = kjson.renderModule(_rules, rule.name)
    const hash   = get_proof_hash(module);
    rule.module  = module;
    rule.hash    = hash;
  })


const outstanding_grounded_proofs = grounded_proofs
  .filter(rule => {
    return !testPath(path.join(KLAB_OUT, "pass", rule.hash));
  })


// write module
outstanding_grounded_proofs
.forEach(rule => {
  // let _rules      = [rule.spec].concat(rule.ctx.spec)
  // let module      = kjson.renderModule(_rules, rule.name)
  const module_path = path.join(KLAB_OUT, "specs", `${rule.name}.k`)

  var old_module  = "";
  if(testPath(module_path)) old_module = read(module_path);
  if(old_module != rule.module) {
    console.log(rule.name + rule.ctx.map(r => "\n - " + r.name));
    fs.writeFileSync(module_path, rule.module);
  }
})

// METADATA
outstanding_grounded_proofs
.forEach(({v2n, act, hash, name}) => {
  // name -> hash
  fs.writeFileSync(path.join(KLAB_OUT, "meta", "name", name), hash);
  // hash -> data
  fs.writeFileSync(path.join(KLAB_OUT, "meta", "data", hash), JSON.stringify({
    v2n,
    act,
    name,
    src: config.src,
    srcs: config.srcs,
    contracts: config.contracts,
    implementations: config.implementations
  }));
})

fs.writeFileSync(path.join(KLAB_OUT, "obligations.batch"), outstanding_grounded_proofs.map(rule => rule.name).join("\n"))

if(write_prelude) {
  console.log('write prelude')
  fs.writeFileSync(path.join(KLAB_OUT, "prelude.smt2"), prelude_str)
}
if(write_rules) {
  console.log('write rules.k')
  fs.writeFileSync(path.join(KLAB_OUT, "rules.k"), rules_str)
}
