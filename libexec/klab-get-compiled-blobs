#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const {docopt}      = require("docopt");
const {
  testPath,
  read,
  ensureDir,
  sha3
} = require("../lib/util.js");

const KLAB_WD_PATH = path.join(process.env.TMPDIR, "klab");
const KLAB_OUT     = process.env.KLAB_OUT || "out";

const usage = `
Usage:
  klab get-compiled-blobs [--terms] [--constraints] [--rules] <hash>
`
const cmd = docopt(usage, {
  argv: ["get-compiled-blobs"].concat(process.argv.slice(2))
});
const TERMS    = cmd['--terms'] || false;
const CONST    = cmd['--constraints'] || false;
const RULES    = cmd['--rules'] || false;
const proofid = cmd['<hash>'];

const edges = JSON.parse(read(path.join(KLAB_OUT, 'compiled', proofid, 'edges.json')));

const blobs = Object.keys(Object.keys(edges)
  .map(ekey => edges[ekey]
    .map(e => [].concat(
        TERMS
        ? [e.from.split("_")[0], e.to.split("_")[1]]
        : []
      ).concat(
        CONST
        ? [e.from.split("_")[1], e.to.split("_")[1]]
        : []
      ).concat(
        RULES
        ? [e.rule]
        : []
      )
    )
    .reduce((a, es) => a.concat(es), [])
  )
  .reduce((a, es) => a.concat(es), [])
  .reduce((a, blob) => {a[blob] = true; return a;}, {}))

console.log(blobs.join('\n'));
