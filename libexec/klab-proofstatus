#!/usr/bin/env node
// TODO - compile needs to carry on the act

const fs = require("fs");
const path = require("path");
const {docopt}      = require("docopt");
const {
  testPath,
  read,
  ensureDir,
  sha3
} = require("../lib/util.js");
const { genBehaviour } = require("../lib/behavior.js");
const getGasExpr = require('../lib/gas.js');
const { deltaCC } = require("../lib/constraints.js")
const kast = require("../lib/kast.js")

const KLAB_WD_PATH = path.join(process.env.TMPDIR, "klab");
const KLAB_OUT     = process.env.KLAB_OUT || "out";

const config_json   = JSON.parse(fs.readFileSync("./config.json"));
const Config        = require("../lib/config.js");

const usage = `
Usage:
  klab get-gas [options] <spec>
`

const cmd = docopt(usage, {
  argv: ["get-gas"].concat(process.argv.slice(2))
});
const config        = Config(config_json, cmd["<spec>"]);

config.rules = testPath(path.join(KLAB_OUT, "rules.k")) && read(path.join(KLAB_OUT, "rules.k"))
  || revert(`no rules found at ${KLAB_OUT}/rules.k`)

config.smt_prelude = testPath(path.join(KLAB_OUT, "prelude.smt2")) && read(path.join(KLAB_OUT, "prelude.smt2"))
  || revert(`no smt prelude file at ${KLAB_OUT}/prelude.mst2`)


const proofid = sha3(JSON.stringify({
  rules: config.rules,
  spec : config.spec,
  smt_prelude: config.smt_prelude
}));

const {
  prune_edges
} = require("../lib/compile.js");

const {pruned_edges, initt, finished} = prune_edges(proofid, false);

const if_else_fi = args => ({
  node: "KApply",
  label: "#if_#then_#else_#fi_K-EQUAL",
  variable: false,
  arity: 3,
  args: args
})

const E = pruned_edges;
const traverse = (firstNode) => {
  var c = firstNode;
  while(c in E && E[c].length == 1) {
    c = E[c][0].to;
  }
  return (!(c in E) || E[c].length == 0)
    ? finished.indexOf(c) > -1
    : (traverse(E[c][0].to), traverse(E[c][1].to))
}

process.exit(traverse(initt) ? 0 : 1)
