#!/usr/bin/env node
const fs = require("fs");
const path = require("path");
const {docopt}      = require("docopt");

const {
  testPath,
  read,
  ensureDir,
  sha3
} = require("../lib/util.js");
const config_json       = JSON.parse(fs.readFileSync("./config.json"));
const makeConfig        = require("../lib/config.js");

const KLAB_WD_PATH = path.join(process.env.TMPDIR, "klab");
const KLAB_OUT     = process.env.KLAB_OUT || "out";

const usage = `
Usage:
  klab get-metadata <spec>
`

const cmd = docopt(usage, {
  argv: ["get-metadata"].concat(process.argv.slice(2))
});

const config        = makeConfig(config_json, cmd["<spec>"]);


config.spec = cmd["<spec>"] && (
    testPath(cmd["<spec>"]) && read(cmd["<spec>"])
    || revert(`spec not found at ${cmd["<spec>"]}`))

config.name = cmd["<spec>"] && path.basename(cmd["<spec>"])
  || cmd["--name"] && (name + ".k")

config.rules = testPath(path.join(KLAB_OUT, "rules.k")) && read(path.join(KLAB_OUT, "rules.k"))
  || revert(`no rules found at ${KLAB_OUT}/rules.k`)

config.smt_prelude = testPath(path.join(KLAB_OUT, "prelude.smt2")) && read(path.join(KLAB_OUT, "prelude.smt2"))
  || revert(`no smt prelude file at ${KLAB_OUT}/prelude.mst2`)


const proofid = sha3(JSON.stringify({
  rules: config.rules,
  spec : config.spec,
  smt_prelude: config.smt_prelude
}));


console.log(JSON.stringify(config, false, 2));
