#!/usr/bin/env node

const path          = require("path")
const marked        = require("marked");
const { execSync }  = require('child_process');
const moment        = require('moment');
const {
  getId,
  testPath,
  read,
  revert,
  render,
  warn,
  ensureDir,
  sha3,
  getBuildId,
  getKlabHEAD,
  getProjectHEAD
}                   = require("../lib/util.js")
const fs     = require("fs");
const KLAB_OUT      = process.env.KLAB_OUT || "out";
const KLAB_EVMS_PATH = process.env.KLAB_EVMS_PATH || path.join(__dirname, '..', 'evm-semantics');
if ('evm-semantics' !== KLAB_EVMS_PATH.match(/([^\/]*)\/*$/)[1]) {
  throw new Error(`Wrong EVMS path: ${KLAB_EVMS_PATH}`);
}
const EVM_SEMANTICS_VERSION = execSync(`git rev-parse HEAD`, {
  cwd: KLAB_EVMS_PATH,
  encoding: 'utf8'
});
const klab_HEAD     = getKlabHEAD()
const project_HEAD  = getProjectHEAD();

const h = n => s => `<${Array.isArray(n) ? n.join(' ') : n}>${Array.isArray(s) && s.join('') || s}</${Array.isArray(n) ? n[0] : n}>`
const table = h("table")
const tr = h("tr")
const td = h("td")
const span = h("span")
const bspan = h(["span", 'class="boldtitle"'])
const sspan = h(["span", 'class="sspan"'])
const codespan = h(["span", 'class="codespan"'])


const build_hash = getBuildId();

const config        = JSON.parse(read(path.join(KLAB_OUT, "config.tmp.json")))
const parsed_tokens = JSON.parse(read(path.join(KLAB_OUT, "report.tmp.json")))
const exhaustiveness= JSON.parse(read(path.join(KLAB_OUT, "exhaustiveness.tmp.json")))
const prelude_path  = config.src.smt_prelude;
const prelude_hash  = sha3(read(prelude_path)).slice(0, 40)
const bin_runtime_k = read(path.join(KLAB_OUT, "bin_runtime.k"));
const bin_runtime_hash = sha3(bin_runtime_k).slice(0, 40);
const rule_paths    = config.src.rules;
const title         = "act";
const raw_rules     = rule_paths.map(p => read(p))
const rule_hashes   = raw_rules.map(str => sha3(str).slice(0, 40))
const badge = (name, status) => `<div class="double-val-label">
  <span class="${status}">
    ${status}
  </span>
</div>`


const getStatus = proofid => proofid
  && testPath(path.join(KLAB_OUT, `accept`, proofid))
  && `accept`
  || (proofid
    && testPath(path.join(KLAB_OUT, `reject`, proofid))
    && `reject`)
  || (proofid
    && testPath(path.join(KLAB_OUT, `meta`, `running`, proofid))
    && `running`)
  || (proofid
    && testPath(path.join(KLAB_OUT, `timeout`, proofid))
    && `timeout`)
  || (proofid
    && testPath(path.join(KLAB_OUT, `aborted`, proofid))
    && `aborted`)
  || (proofid
    && `queue`)
  || `blocked`
;

const mapCaseStatus = cases => cases
  .map(c => {
    const spec_path = path.join(KLAB_OUT, `meta/name/${c.name}`);
    const proofid = testPath(spec_path) && read(spec_path);
    const status = getStatus(proofid)
    const ret = {
      proofid,
      status,
      spec: c.name
    };
    if(status == 'accept' || status == 'reject' || status == 'timeout' || status == 'aborted') {
      ret.exit = read(path.join(KLAB_OUT, status, proofid)).trim()

      const stopped = new Date(fs.statSync(path.join(KLAB_OUT, status, proofid)).mtime);
      const started = testPath(path.join(KLAB_OUT, 'started', proofid))
        ? new Date(fs.statSync(path.join(KLAB_OUT, 'started', proofid)).mtime) : stopped;
      const duration = Math.floor((stopped.getTime() - started.getTime()) / 1000);
      const cpu_time = testPath(path.join(KLAB_OUT, 'meta', 'time', proofid))
        ? read(path.join(KLAB_OUT, 'meta', 'time', proofid)).match(/\d*/)[0] : null

      ret.stopped = moment(stopped).format('YYYY-MM-DD, HH:mm');
      ret.started = moment(started).format('YYYY-MM-DD, HH:mm');
      const format = s => Math.floor(s / 60) + ' min ' + (s % 60) + ' sec'
      ret.duration = format(duration)
      ret.cpu_time = cpu_time ? format(cpu_time) : null
    } else if(status == 'running') {
      const stats = fs.statSync(path.join(KLAB_OUT, "meta", status, proofid));
      const mtime = new Date(stats.mtime);
      ret.started = moment(mtime).format('YYYY-MM-DD, HH:mm');
    }
    return ret;
  })

const __a2n = act => act.subject + "_" + act.name;
const getBadges = (cases, act) => {

  const status = mapCaseStatus(cases)

  const links = cases
    .map((c, i) => [c, status[i]])
    .sort((a, b) => {
      let s = x => ['accept', 'running', 'queue', 'blocked', 'reject', 'timeout', 'aborted'].indexOf(x.status)
      return s(a[1]) - s(b[1]);
    })
    .map(([c, s]) => {
      var proof_info = [
        td(codespan((s.proofid || "").slice(0, 8)) + span( s.status !== 'blocked' ? h(["a", `href="/${config.name}/${s.proofid + ".k"}"`])(s.spec+'.k') : s.spec + '.k'))
      ]

      const rejected = s.status == 'reject' || s.status == 'timeout';
      const accepted = s.status == 'accept';
      const blocked  = s.status == 'blocked';
      const running  = s.status == 'running';
      const aborted  = s.status == 'aborted';
      const finished = accepted || rejected || aborted;

      const duration = s.duration + (s.cpu_time ? ` / ${s.cpu_time} cpu` : "")
      proof_info.push(td(finished ? bspan("finished:") + span(s.stopped) + bspan("in") + span(duration) : ""))
      proof_info.push(td(running  ? bspan("started:") + span(s.started) : ""))

      let blocked_links = "";
      if(blocked && c.imports) {
        blocked_links = c.imports
          .filter(name => !case_map[name] || case_map[name].status != "accept")
          .map(name => case_map[name] ? name : name + "_rough")
          .filter(name => case_map[name])
          .map(name => h(['a', `href="#${case_map[name].act.subject}_${case_map[name].act.sig}"`])(name))
          .join(", ")
      }

      const outPath = path.join(KLAB_OUT, "log", s.proofid + ".log");
      const errPath = path.join(KLAB_OUT, "log", s.proofid + ".err.log");
      const tarballPath = path.join(KLAB_OUT, "log", s.proofid + ".tar");
      const gasPath = path.join(KLAB_OUT, "gas", s.proofid + ".all.json");

      const lemmaPath = path.join(KLAB_OUT, "log", s.proofid + "_lemma_stats.json");
      const hasOut = testPath(outPath);
      const hasErr = testPath(errPath);
      const hasTarball = testPath(tarballPath);
      const hasGas = testPath(gasPath);

      const lemma_stats = testPath(lemmaPath) && JSON.parse(read(lemmaPath)) || {};

      proof_info.push(td(accepted ? [
        hasGas && sspan(h(['a', `href="/${config.name}/${s.proofid}.all.json"`])('gas')) || sspan("no-gas"),
      ] : ""))

      proof_info.push(td(rejected ? [
        hasOut && sspan(h(['a', `href="/${config.name}/${s.proofid}.log"`])('stdout')) || "",
        hasErr && sspan(h(['a', `href="/${config.name}/${s.proofid}.err.log"`])('stderr')) || "",
      ] : ""))

      proof_info.push(td(blocked ? [ sspan(`blocked on: ${blocked_links}`) ] : ""))


      proof_info.push(td(badge(c.suffix, ((rejected || aborted) ? `${s.status} [${s.exit}]` : s.status))))

      let tarball = "";
      if(finished && hasTarball) {
        tarball = tr(`<td colspan="4" class="tarballselect">${h(['input', `class="autoselect" type="text" value="klab fetch https://${config.host}/${config.name}/${s.proofid+'.tar'}" onfocus="this.select()"`])("")}</td>`)
      } else if (rejected || aborted) {
        tarball = tr(`<td colspan="4" class="tarballselect">${h(['input', `class="autoselect" type="text" value="No log archive found"`])("")}</td>`)
      }

      let lemmas = ""
      if(Object.keys(lemma_stats).length > 0) {
        lemmas = tr([
        `<td colspan="4" class="lemma_stats"><ul>${Object.keys(lemma_stats).map(name => `<li><a href="#${name}">${name}</a>: ${lemma_stats[name]}</li>`).join("\n")}</ul></td>`
        ])
      }

      return h(["tr", `id="${s.spec}" class="${s.status}"`])(proof_info) + tarball + lemmas
    })
    .join('\n')
  return {
    type: "html",
    text: `<div class="actstatus">${table(links)}</div>`,
    pre: false
  }
};



const genCoverageReport = (proofs) => {

  const coverage = Object.keys(config.contracts)
    .map(contract_name => {
      const c = config.contracts[contract_name];
      const abi_signatures = c.abi
        .filter(fabi => fabi.type == 'function')
        .map(fabi => `${fabi.name}(${fabi.inputs.map(i => i.type).join(',')})`);

      const exhaustive_proof = exhaustiveness[contract_name];
      const exhaustive_status = getStatus(exhaustive_proof.hash)

      const abi_functions = abi_signatures
        .map(sig => ({
          sig,
          accept:  proofs[contract_name + '.' + sig] && proofs[contract_name + '.' + sig].accept  || 0,
          reject:  proofs[contract_name + '.' + sig] && proofs[contract_name + '.' + sig].reject  || 0,
          timeout: proofs[contract_name + '.' + sig] && proofs[contract_name + '.' + sig].timeout || 0,
          aborted: proofs[contract_name + '.' + sig] && proofs[contract_name + '.' + sig].aborted || 0,
          running: proofs[contract_name + '.' + sig] && proofs[contract_name + '.' + sig].running || 0,
          queue:   proofs[contract_name + '.' + sig] && proofs[contract_name + '.' + sig].queue   || 0,
          total:   proofs[contract_name + '.' + sig] && proofs[contract_name + '.' + sig].total   || 0,
          msg: !proofs[contract_name + '.' + sig] ? 'not specified' : ''
        }))
        .sort((a, b) => a.sig < b.sig ? -1 : 1)

      const lemmas = Object.keys(proofs)
        .filter(key => (new RegExp("^" + contract_name + "\\.")).test(key))
        .filter(key => abi_signatures.map(sig => contract_name + "." + sig).indexOf(key) == -1)
        .map(key => ({
          sig: key.slice(contract_name.length + 1),
          accept: proofs[key].accept,
          reject: proofs[key].reject,
          timeout: proofs[key].timeout,
          aborted: proofs[key].aborted,
          running: proofs[key].running,
          queue: proofs[key].queue,
          total: proofs[key].total,
          msg: ''
        }))
        .sort((a, b) => a.sig < b.sig ? -1 : 1)

      const contract_coverage = abi_functions.concat(lemmas)
        .map(f => f.accept)
        .sort((a, b) => a.sig < b.sig ? -1 : 1)
        .reduce((a, b) => a + b, 0)
      return {
        name: contract_name,
        abi_functions,
        lemmas,
        exhaustive: {
          proof: exhaustive_proof,
          status: exhaustive_status
        },
        coverage: contract_coverage,
        total: abi_functions.concat(lemmas).reduce((a, o) => a + o.total, 0),
        totals: abi_functions.concat(lemmas).reduce((a, o) => ({
          total: a.total + o.total,
          queue: a.queue + o.queue,
          accept: a.accept + o.accept,
          reject: a.reject + o.reject,
          running: a.running + o.running,
          timeout: a.timeout + o.timeout,
          aborted: a.aborted + o.aborted,
        }), { total: 0,
              queue: 0,
              accept: 0,
              reject: 0,
              running: 0,
              timeout: 0,
              aborted: 0
        })
      }
    })

  const totals = Object.keys(coverage)
    .reduce((a, o) => ({
          total: a.total + coverage[o].totals.total,
          queue: a.queue + coverage[o].totals.queue,
          accept: a.accept + coverage[o].totals.accept,
          reject: a.reject + coverage[o].totals.reject,
          running: a.running + coverage[o].totals.running,
          timeout: a.timeout + coverage[o].totals.timeout,
          aborted: a.aborted + coverage[o].totals.aborted
        }), { total: 0,
              queue: 0,
              accept: 0,
              reject: 0,
              running: 0,
              timeout: 0,
              aborted: 0
        }
    )

  const render = name => {
    return o => (`<tr class="${o.accept == o.total && o.total > 0 ? "" : "outstanding"}">
    <td class="status ${o.accept > 0 ? "accept" : "empty"}">
      ${o.accept > 0 ? o.accept : "-"}
    </td>
    <td class="status ${o.reject > 0 ? "reject" : "empty"}">
      ${o.reject > 0 ? o.reject : "-"}
    </td>
    <td class="status ${o.timeout > 0 ? "timeout" : "empty"}">
      ${o.timeout > 0 ? o.timeout : "-"}
    </td>
    <td class="status ${o.aborted > 0 ? "aborted" : "empty"}">
      ${o.aborted > 0 ? o.aborted : "-"}
    </td>
    <td class="status ${o.running > 0 ? "running" : "empty"}">
      ${o.running > 0 ? o.running : "-"}
    </td>
    <td class="status ${o.queue > 0 ? "queue" : "empty"}">
      ${o.queue > 0 ? o.queue : "-"}
    </td>
    <td class="status ${o.total > 0 ? "" : "empty"}">
      ${o.total > 0 ? o.total : "-"}
    </td>
    <td class="sig">${o.sig ? o.total > 0 ? `<a href="#${name+"_"+o.sig}">${o.sig}</a>` : o.sig : ''}</td>
    <td>
      ${o.msg ? o.msg : ''}
    </td>
    </tr>`)
  }

  const contract_coverage = coverage
    .map(cc => {
      const abi_list = cc.abi_functions
        .map(render(cc.name))
        .join('\n')
      const lemmas_list = cc.lemmas
        .map(render(cc.name))
        .join('\n')
      const lemmas_str = lemmas_list.length == 0 ? "" : `
        <span class="lemmas">lemmas:</span>
        <table class="lemmas">${lemmas_list}</table>
        `
      const exhaust_str = `
        <span class="lemmas">abi exhaustive:</span>
        <span class="exhaustiveness">${badge("exhaustive", cc.exhaustive.status)}</span>
        `
      return `<li class="contract_coverage">
        <span class="name">${cc.name}</span>
        <span class="progress">${Math.floor(cc.coverage)} / ${cc.total}</span>
        <table class="total">${render('')(cc.totals)}</table>
        <table class="abi">${abi_list}</table>
        ${lemmas_str}
        ${exhaust_str}
        </li>`
    })

  const total_coverage = `<li class="contract_coverage">
        <span class="name">${config.name}</span>
        <table class="total">${render('')(totals)}</table>
        </li>`

  return `<ul class="contract_coverage">${[total_coverage].concat(contract_coverage).join('\n')}</ul>`
}

const stats_object = [
  ["Klab version", `<a href="https://github.com/dapphub/klab/tree/${klab_HEAD}">${klab_HEAD}</a>`],
  ["EVM-semantics version", `<a href="https://github.com/kframework/evm-semantics/tree/${EVM_SEMANTICS_VERSION}">${EVM_SEMANTICS_VERSION}</a>`],
  ["bin_runtime", `<a href="bin_runtime.k">${bin_runtime_hash}</a>`]
].concat(
  project_HEAD ? [[config.name + " version", `<a href="${config.url}/tree/${project_HEAD}">${project_HEAD}</a>`]] : []
).concat(
  rule_paths.map((rule_path, i) => [path.basename(rule_path), h(["a", `href="${path.basename(rule_path)}"`])(rule_hashes[i])])
).concat(
  prelude_path ? [[path.basename(prelude_path), h(["a", `href="${path.basename(prelude_path)}"`])(prelude_hash)]] : []
)

const stats = table(
    stats_object
      .map(([k, v]) => tr(td(k) + td(v)))
      .join("\n")
)

const case_map = parsed_tokens
  .filter(o => o.type == 'code' && o.lang === "act")
  .map(e => e.cases)
  .reduce((a, cs) => a.concat(cs), [])
  .reduce((a, rule) => ({...a, [rule.name]: rule}), {});

const proofs = parsed_tokens
  .filter(o => o.type == 'code' && o.lang === "act")
  .map(o => {
    const contract_name = config.implementations[o.obj.subject];
    const cstatus = mapCaseStatus(o.cases)
    return {
      contract: contract_name.name,
      sig: o.obj.signature || "lemma." + o.obj.name,
      accept: cstatus.filter(o => o.status == 'accept').length,
      reject: cstatus.filter(o => o.status == 'reject').length,
      running: cstatus.filter(o => o.status == 'running').length,
      timeout: cstatus.filter(o => o.status == 'timeout').length,
      aborted: cstatus.filter(o => o.status == 'aborted').length,
      queue: cstatus.filter(o => o.status == 'queue').length,
      total: cstatus.length,
      proofs: cstatus
    }
  })
  .reduce((a, o) => {
    const id = o.contract + '.' + o.sig;
    if(id in a) {
      a[id].accept += o.accept;
      a[id].reject += o.reject;
      a[id].running += o.running;
      a[id].timeout += o.timeout;
      a[id].aborted += o.aborted;
      a[id].queue += o.queue;
      a[id].total += o.total;
      a[id].proofs = a[id].proofs.concat(o.proofs)
    } else {
      a[id] = o;
    }
    return a;
  }, {})

const enriched_tokens = [{
  type: 'html',
  text: `<div id="stats">${stats}</div><div id="coverage">${genCoverageReport(proofs)}</div>`
}].concat(parsed_tokens
  .reduce((a, t) => {
    return a.concat(t.type == "code" && t.lang === "act" ? [{...t, type: "html", text: t.text}, getBadges(t.cases, t.obj)] : t)
  }, []))
enriched_tokens.links = {};

const body = marked.parser(enriched_tokens);
const htmlTemplate = read(path.join(__dirname, "../resources/report.tmp.html"));

const htmlString = render(htmlTemplate, {
  body,
  title
})

ensureDir(path.join(KLAB_OUT, 'report'))
fs.writeFileSync(path.join(KLAB_OUT, 'report', 'index.html'), htmlString);

const json_report = {
  [build_hash]: {
    date: new Date(),
    proofs,
    git: project_HEAD
  },
  url: config.url,
  name: config.name
}
fs.writeFileSync(path.join(KLAB_OUT, 'report', 'report.json'), JSON.stringify(json_report))
console.log(new Date());
