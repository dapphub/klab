#!/usr/bin/env node

// TODO - include returns in output
const path          = require("path")
const marked        = require("marked");
const { execSync }  = require('child_process');
const Config        = require("../lib/config.js");
const moment        = require('moment');
const {
  parseAct
}    = require("../lib/build.js");
const {
  getId,
  testPath,
  read,
  revert,
  render,
  warn,
  ensureDir,
  sha3
}                   = require("../lib/util.js")
const fs     = require("fs");
const KLAB_OUT      = process.env.KLAB_OUT || "out";
const {getStorageDef} = require("../lib/storage.js");
const KLAB_EVMS_PATH = process.env.KLAB_EVMS_PATH || path.join(__dirname, '..', 'evm-semantics');
const EVM_SEMANTICS_VERSION = execSync(`git rev-parse HEAD`, {
  cwd: KLAB_EVMS_PATH,
  encoding: 'utf8'
});
const klab_HEAD     = execSync(`git rev-parse HEAD`, {
  cwd: path.join(__dirname, '..'),
  encoding: 'utf8'
});
// const out           = JSON.parse(read(path.join(KLAB_OUT, "out.json")));
const config_json   = JSON.parse(read("./config.json"));

const h = n => s => `<${Array.isArray(n) ? n.join(' ') : n}>${Array.isArray(s) && s.join('') || s}</${Array.isArray(n) ? n[0] : n}>`
const table = h("table")
const tr = h("tr")
const td = h("td")
const span = h("span")
const bspan = h(["span", 'class="boldtitle"'])
const sspan = h(["span", 'class="sspan"'])
// const textinput = h(["input", 'type="text"'])


var project_HEAD = '';
if(config_json.url) {
  project_HEAD     = execSync(`git rev-parse HEAD`, {
    encoding: 'utf8'
  });
}

const config        = Config(config_json);
const prelude_path  = config.src.smt_prelude;
const prelude_hash  = sha3(read(prelude_path)).slice(0, 40)
const config_path   = config.src.specification;
const rule_paths    = config.src.rules;
const raw_md_config = read(config_path)
const title         = path.basename(config_path, ".md");
const raw_rules     = rule_paths.map(p => read(p))
const rule_hashes   = raw_rules.map(str => sha3(str).slice(0, 40))
const rules         = marked
  .lexer(raw_rules.join("\n\n"))
  .filter(block => block.type === "code")
  .map(block => block.text)
  .join("\n\n")
const tokens        = marked.lexer(raw_md_config)
// const act2specs     = Object.keys(out)
//   .reduce((a, key) => ({...a, [out[key].act]: [...(a[out[key].act] || []), key]}), {})
const badge = (name, status) => `<div class="double-val-label">
  <span class="${status}">
    ${status}
  </span>
</div>`

const getCases = act => [ {
    act: {...act},
    name: __a2n(act) + "_pass_rough",
    suffix: 'pass_rough',
    pass: true,
    oog: false
  }, {
    act: {...act},
    name: __a2n(act) + "_pass",
    suffix: 'pass',
    pass: true,
    oog: false
  }, {
    act: {...act},
    name: __a2n(act) + "_pass_oog",
    suffix: 'pass_oog',
    pass: true,
    oog: true
  }].concat("iff" in act ? [{
    act: {...act},
    pass: false,
    oog: false,
    name: __a2n(act) + "_fail",
    suffix: 'fail'
  }] : [] )

const mapCaseStatus = cases => cases
  // .map((c, i) => path.join(KLAB_OUT, `meta/name/${c.name}`))
  .map(c => {
    const spec_path = path.join(KLAB_OUT, `meta/name/${c.name}`);
    const proofid = testPath(spec_path) && read(spec_path);
    const status = proofid
      && testPath(path.join(KLAB_OUT, `accept`, proofid))
      && `accept`
      || (proofid
        && testPath(path.join(KLAB_OUT, `reject`, proofid))
        && `reject`)
      || (proofid
        && testPath(path.join(KLAB_OUT, `meta`, `running`, proofid))
        && `running`)
      || (proofid
        && `queue`)
      || `blocked`
      ;
    const ret = {
      proofid,
      status,
      spec: c.name
    };
    if(status == 'accept' || status == 'reject') {
      var stats = fs.statSync(path.join(KLAB_OUT, status, proofid));
      var mtime = new Date(stats.mtime);
      ret.date = moment(mtime).format('YYYY-MM-DD, HH:mm');

      const duration_raw = fs.readFileSync(path.join(KLAB_OUT, 'meta', 'time', proofid));
      const duration = (/\d*/).exec(duration_raw)[0]
      ret.duration = Math.floor(duration / 60) + ' min ' + (duration % 60) + ' sec'
    }
    return ret;
  })

const __a2n = act => act.subject + "_" + act.name;
const getBadges = act => {

  const cases = getCases(act)

  const status = mapCaseStatus(cases)

    // .map(proofid => [proofid, path.join(KLAB_OUT, "log", `boot_${proofid}.json`)])
    // .map(([pid, log_path]) => testPath(log_path)
    //   && {proofid: pid, status: JSON.parse(read(log_path)).status}
    //   || {status: "???"}
    // )
  // let links = cases
  //   .map((c, i) => c.suffix === 'pass_oog'
  //     ? badge(c.suffix, status[i].status)
  //     : `<a href="https://proof.dapp.ci/#${status[i].proofid}">${badge(c.suffix, status[i].status)}</a>`
  //   )
  //   .join("\n")
  const links = cases
    .map((c, i) => {
      const s = status[i];

      var proof_info = [
        td(span( s.status !== 'blocked' ? h(["a", `href="${s.spec + ".k"}"`])(s.spec+'.k') : s.spec + '.k'))
      ]

      var zip = '';

      const rejected = s.status == 'reject';
      const accepted = s.status == 'accept';
      const finished = accepted || rejected;

      proof_info.push(td(finished ? bspan("finished:") + span(s.date) + bspan("in") + span(s.duration) : ""))
      // proof_info.push(td(finished ?  : ""))


      proof_info.push(td(
           rejected && [
            sspan(h(['a', `href="/${config.name}/${s.proofid}.log"`])('stdout')),
            sspan(h(['a', `href="/${config.name}/${s.proofid}.err.log"`])('stderr')),
          ]
        || accepted && [
          sspan(h(['a', `href="https://proof.dapp.ci/#${s.proofid}"`])('inspect proof'))
        ]
        || ''
      ))

      proof_info.push(td(badge(c.suffix, s.status)))

      if(rejected) {
        zip = tr(`<td colspan="4" class="zipselect">${h(['input', `class="autoselect" type="text" value="klab fetch http://dapp.ci/${config.name}/${s.proofid+'.zip'}" autofocus="autofocus" onfocus="this.select()"`])("")}</td>`)
      }

      return h(["tr", `class="${s.status}"`])(proof_info) + zip
    })
    .join('\n')
  return {
    type: "html",
    text: `<div class="actstatus">${table(links)}</div>`,
    pre: false
  }
};

const cleanupCode = act_obj => {

  // build storage
  // fold subjects
  let storages_blocks = Object
    .keys(act_obj.storage || {})
    .map(subjectName => {
      // TODO - export this one level higher - all storages
      let max_key_length = Object
        .keys(act_obj.storage[subjectName])
        .map(key => key.length)
        .reduce((a, l) => Math.max(a, l), 0);
      let max_lhs_length = Object
        .keys(act_obj.storage[subjectName])
        .map(key => act_obj.storage[subjectName][key][0].length)
        .reduce((a, l) => Math.max(a, l), 0);
      let storage = Object
        .keys(act_obj.storage[subjectName])
        .map(key => {
          let rewrites = act_obj.storage[subjectName][key];
          const key_ = /^(\d|\#)/.test(key) ? key : `#${subjectName == "ACCT_ID" ? act_obj.subject : subjectName}.${key}`
          const def = getStorageDef(key_);
          if(!def && false) {
            warn(`Storage key ${key_} in ${act_obj.subject}.${act_obj.name} not declared!`)
          }
          rewrites[0] = rewrites[0] + " ".repeat(max_lhs_length - rewrites[0].length)
          let storage_str = "  "
            + key
            + " ".repeat(max_key_length - key.length)
            + " |-> "
            + rewrites.join(" => ")
          let comment_str = def && ("  // " + def.doc(key_) + "\n") || ""
          return comment_str + storage_str;
        })
        .join("\n")
      return "storage" + (subjectName !== "ACCT_ID" ? " " + subjectName : "") + "\n" + storage;
    })
    .join("\n\n")

  const behaviour_title = `behaviour ${act_obj.name} of ${act_obj.subject}`
  const iface_args = act_obj.interface.map(i => i[0] + " " + i[1]).join(", ");
  const interface = `interface ${act_obj.fname}(${iface_args})`;
  var iff = "";
  if(act_obj.iff_orig) {
    iff = "\niff\n" + act_obj
      .iff_orig
      .map(s => "  " + s)
      .join("\n")
      .replace(/\/\/ doc:/g, "//")
      .replace(/\/\/ act:/g, "//")
  }

  var if_ = "";
  if(act_obj.if_orig) {
    if_ += "\nif\n" + act_obj
      .if_orig
      .map(s => "  " + s)
      .join("\n")
      .replace(/\/\/ doc:/g, "//")
      .replace(/\/\/ act:/g, "//")
  }

  var returns = "";
  if(act_obj.returns) {
    returns += "\nreturns " + act_obj
      .returns
      .map(s => s.trim())
      .join(" : ");
  }

  const display = [
    behaviour_title,
    interface
  ];
  if(storages_blocks != "") display.push("\n" + storages_blocks)
  if(iff != "") display.push(iff)
  if(if_ != "") display.push(if_)
  if(returns != "") display.push(returns)

  const code_ = display
    .join("\n")
    .replace(/\/\/(.*)\n/gm, (_1, _2, l) => `<span class="comment">//${_2}</span>\n`)
    .replace(/\s*\`[^\?\`]*\?([^\:\`]*)\:[^\`]*\`\s*/g, (_1, s) => s.trim() == "" ? " " : ` ${s.trim()} `)
    .replace(/\`([^\`]*)\`/g, (_, s) => `<span class="var">${s}</span>`)

  // console.log(JSON.stringify(act_obj, false, 2));
  // console.log(code_);
  return "<pre><code>" + code_ + "</code></pre>";
}


const parsed_tokens = tokens
  .map(t => t.type == 'code'
    ? {type: 'code', obj: parseAct({})(t.text, true), text: t.text}
    : t
  );

const genCoverageReport = (pt) => {
  const proofs = pt
    .filter(o => o.type == 'code')
    .map(o => {
      const cases = getCases(o.obj);
      const contract_name = config.implementations[o.obj.subject];
      const cstatus = mapCaseStatus(cases)
      return {
        contract: contract_name.name,
        sig: o.obj.signature,
        status: cstatus.filter(o => o.status == 'accept').length,
        total: cstatus.length
      }
    })
    .reduce((a, o) => ({
      ...a,
      [o.contract + '.' +o.sig]: o
    }), {})

  const coverage = Object.keys(config.contracts)
    .map(contract_name => {
      const c = config.contracts[contract_name];
      const abi_functions = JSON.parse(c.abi)
        .filter(fabi => fabi.type == 'function')
        .map(fabi => `${fabi.name}(${fabi.inputs.map(i => i.type).join(',')})`)
        .map(sig => ({
          sig,
          status: proofs[contract_name + '.' + sig].status || 0,
          total: proofs[contract_name + '.' + sig].total || 0,
          msg: !proofs[contract_name + '.' + sig] ? 'noimpl' : 'ok'
        }))
      const contract_coverage = abi_functions
        .map(f => f.status)
        .reduce((a, b) => a + b, 0)
      return {
        name: contract_name,
        abi_functions,
        coverage: contract_coverage,
        total: abi_functions.reduce((a, o) => a + o.total, 0)
      }
    })
  // console.log(JSON.stringify(coverage, false, 2));
  const contract_coverage = coverage
    .map(cc => {
      const abi_list = cc
        .abi_functions
        .map(o => `<tr>
        <td class="sig">${o.sig}</td>
        <td>
          ${o.msg}
        </td>
        <td class="status">
          ${o.status} / ${o.total}
        </td>
        </tr>`)
        .join('\n')
      return `<li class="contract_coverage">
        <span class="name">${cc.name}</span>
        <span class="progress">${Math.floor(cc.coverage)} / ${cc.total}</span>
        <table class="abi">${abi_list}</table>
        </li>`
    })

  return `<ul class="contract_coverage">${contract_coverage.join('\n')}</ul>`
}

const stats_object = [
  ["Klab version", `<a href="https://github.com/dapphub/klab/tree/${klab_HEAD}">${klab_HEAD}</a>`],
  ["EVM-semantics version", `<a href="https://github.com/kframework/evm-semantics/tree/${EVM_SEMANTICS_VERSION}">${EVM_SEMANTICS_VERSION}</a>`]
].concat(
  project_HEAD ? [[config.name + " version", `<a href="${config.url}/tree/${project_HEAD}">${project_HEAD}</a>`]] : []
).concat(
  rule_paths.map((rule_path, i) => [path.basename(rule_path), h(["a", `href="${path.basename(rule_path)}"`])(rule_hashes[i])])
).concat(
  prelude_path ? [[path.basename(prelude_path), h(["a", `href="${path.basename(prelude_path)}"`])(prelude_hash)]] : []
)

const stats = table(
    stats_object
      .map(([k, v]) => tr(td(k) + td(v)))
      .join("\n")
)

const enriched_tokens = [{
  type: 'html',
  text: `<div id="stats">${stats}</div><div id="coverage">${genCoverageReport(parsed_tokens)}</div>`
}].concat(parsed_tokens
  .reduce((a, t) => {
    return a.concat(t.type == "code" ? [{...t, type: "html", text: cleanupCode(t.obj)}, getBadges(t.obj)] : t)
  }, []))
enriched_tokens.links = tokens.links;

const body = marked.parser(enriched_tokens);
const htmlTemplate = read(path.join(__dirname, "../resources/report.tmp.html"));

const htmlString = render(htmlTemplate, {
  body,
  title
})

ensureDir(path.join(KLAB_OUT, 'report'))
fs.writeFileSync(path.join(KLAB_OUT, 'report', 'index.html'), htmlString);
