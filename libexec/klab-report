#!/usr/bin/env node

// TODO - include returns in output

const path          = require("path")
const marked        = require("marked");
const Config        = require("../lib/config.js");
const {
  proofCollection,
  parseAct
}    = require("../lib/build.js");
const {
  getId,
  testPath,
  read,
  revert,
  render,
  warn
}                   = require("../lib/util.js")
const KLAB_OUT      = process.env.KLAB_OUT || "out";
const {getStorageDef} = require("../lib/storage.js");
const config_json   = JSON.parse(read("./config.json"));
// const out           = JSON.parse(read(path.join(KLAB_OUT, "out.json")));
const config        = Config(config_json);
const config_path   = config.src.specification;
const rule_paths    = config.src.rules;
const raw_md_config = read(config_path)
const title         = path.basename(config_path, ".md");
const raw_rules     = rule_paths.map(p => read(p)).join("\n\n")
const rules         = marked
  .lexer(raw_rules)
  .filter(block => block.type === "code")
  .map(block => block.text)
  .join("\n\n")
const tokens        = marked.lexer(raw_md_config)
// const act2specs     = Object.keys(out)
//   .reduce((a, key) => ({...a, [out[key].act]: [...(a[out[key].act] || []), key]}), {})
const badge = (name, status) => `<div class="badge">
  <div class="name">
    <span>
      ${name}
    </span>
  </div>
  <div class="status ${status == "pass" ? "green" : (status == "???" ? "yellow" : "red") }">
    <span>
      ${status}
    </span>
  </div>
</div>`

const __a2n = act => act.subject + "_" + act.name;
const getBadges = act => {

  const cases = [ {
    act: {...act},
    name: __a2n(act) + "_pass_rough",
    pass: true,
    oog: false
  }, {
    act: {...act},
    name: __a2n(act) + "_pass",
    pass: true,
    oog: false
  }, {
    act: {...act},
    name: __a2n(act) + "_pass_oog",
    pass: true,
    oog: true
  }].concat("iff" in act ? [{
    act: {...act},
    pass: false,
    oog: false,
    name: __a2n(act) + "_fail"
  }] : [] )

  let status = cases
    .map((c, i) => path.join(KLAB_OUT, `meta/name/${c.name}`))
    .map(spec_path => {
      let proofid = testPath(spec_path) && read(spec_path);
      let status = proofid
        && testPath(path.join(KLAB_OUT, `pass`, proofid))
        && `pass`
        || proofid
          && testPath(path.join(KLAB_OUT, `fail`, proofid))
          && `fail`
        || `????`
        ;
      return {
        proofid,
        status
      };
    })

    // .map(proofid => [proofid, path.join(KLAB_OUT, "log", `boot_${proofid}.json`)])
    // .map(([pid, log_path]) => testPath(log_path)
    //   && {proofid: pid, status: JSON.parse(read(log_path)).status}
    //   || {status: "???"}
    // )
  let links = cases
    .map((c, i) => `<a href="https://proof.dapp.ci/#${status[i].proofid}">${badge(c.name, status[i].status)}</a>`)
    .join("\n")
  return {
    type: "html",
    text: `<div class="actstatus">${links}</div>`,
    pre: false
  }
};

const cleanupCode = act_obj => {

  // build storage
  // fold subjects
  let storages_blocks = Object
    .keys(act_obj.storage || {})
    .map(subjectName => {
      // TODO - export this one level higher - all storages
      let max_key_length = Object
        .keys(act_obj.storage[subjectName])
        .map(key => key.length)
        .reduce((a, l) => Math.max(a, l), 0);
      let max_lhs_length = Object
        .keys(act_obj.storage[subjectName])
        .map(key => act_obj.storage[subjectName][key][0].length)
        .reduce((a, l) => Math.max(a, l), 0);
      let storage = Object
        .keys(act_obj.storage[subjectName])
        .map(key => {
          let rewrites = act_obj.storage[subjectName][key];
          const key_ = /^(\d|\#)/.test(key) ? key : `#${subjectName == "ACCT_ID" ? act_obj.subject : subjectName}.${key}`
          const def = getStorageDef(key_);
          if(!def) {
            warn(`Storage key ${key_} in ${act_obj.subject}.${act_obj.name} not declared!`)
          }
          rewrites[0] = rewrites[0] + " ".repeat(max_lhs_length - rewrites[0].length)
          let storage_str = "  "
            + key
            + " ".repeat(max_key_length - key.length)
            + " |-> "
            + rewrites.join(" => ")
          let comment_str = def && ("  // " + def.doc(key_) + "\n") || ""
          return comment_str + storage_str;
        })
        .join("\n")
      return "storage" + (subjectName !== "ACCT_ID" ? " " + subjectName : "") + "\n" + storage;
    })
    .join("\n\n")

  const behaviour_title = `behaviour ${act_obj.name} of ${act_obj.subject}`
  const iface_args = act_obj.interface.map(i => i[0] + " " + i[1]).join(", ");
  const interface = `interface ${act_obj.fname}(${iface_args})`;
  var iff = "";
  if(act_obj.iff_orig) {
    iff = "\niff\n" + act_obj
      .iff_orig
      .map(s => "  " + s)
      .join("\n")
      .replace(/\/\/ doc:/g, "//")
      .replace(/\/\/ act:/g, "//")
  }

  var if_ = "";
  if(act_obj.if_orig) {
    if_ += "\nif\n" + act_obj
      .if_orig
      .map(s => "  " + s)
      .join("\n")
      .replace(/\/\/ doc:/g, "//")
      .replace(/\/\/ act:/g, "//")
  }

  var returns = "";
  if(act_obj.returns) {
    returns += "\nreturns " + act_obj
      .returns
      .map(s => s.trim())
      .join(" : ");
  }

  const display = [
    behaviour_title,
    interface
  ];
  if(storages_blocks != "") display.push("\n" + storages_blocks)
  if(iff != "") display.push(iff)
  if(if_ != "") display.push(if_)
  if(returns != "") display.push(returns)

  const code_ = display
    .join("\n")
    .replace(/\/\/(.*)\n/gm, (_1, _2, l) => `<span class="comment">//${_2}</span>\n`)
    .replace(/\s*\`[^\?\`]*\?([^\:\`]*)\:[^\`]*\`\s*/g, (_1, s) => s.trim() == "" ? " " : ` ${s.trim()} `)
    .replace(/\`([^\`]*)\`/g, (_, s) => `<span class="var">${s}</span>`)

  // console.log(JSON.stringify(act_obj, false, 2));
  // console.log(code_);
  return "<pre><code>" + code_ + "</code></pre>";
}



const enriched_tokens = tokens
  .map(t => t.type == 'code'
    ? {type: 'code', obj: parseAct({})(t.text, true), text: t.text}
    : t
  )
  .reduce((a, t) => {
    return a.concat(t.type == "code" ? [{...t, type: "html", text: cleanupCode(t.obj)}, getBadges(t.obj)] : t)
  }, [])
enriched_tokens.links = tokens.links;

const body = marked.parser(enriched_tokens);
const htmlTemplate = read(path.join(__dirname, "../resources/report.tmp.html"));

const report = render(htmlTemplate, {
  body,
  title
})


// console.log(storage_def);





console.log(report);
