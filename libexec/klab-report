#!/usr/bin/env node

// TODO - include returns in output
const path          = require("path")
const marked        = require("marked");
const { execSync }  = require('child_process');
const moment        = require('moment');
const {
  getId,
  testPath,
  read,
  revert,
  render,
  warn,
  ensureDir,
  sha3,
  getBuildId,
  getKlabHEAD,
  getProjectHEAD
}                   = require("../lib/util.js")
const fs     = require("fs");
const KLAB_OUT      = process.env.KLAB_OUT || "out";
const KLAB_EVMS_PATH = process.env.KLAB_EVMS_PATH || path.join(__dirname, '..', 'evm-semantics');
const EVM_SEMANTICS_VERSION = execSync(`git rev-parse HEAD`, {
  cwd: KLAB_EVMS_PATH,
  encoding: 'utf8'
});
const klab_HEAD     = getKlabHEAD()
const project_HEAD  = getProjectHEAD();

const h = n => s => `<${Array.isArray(n) ? n.join(' ') : n}>${Array.isArray(s) && s.join('') || s}</${Array.isArray(n) ? n[0] : n}>`
const table = h("table")
const tr = h("tr")
const td = h("td")
const span = h("span")
const bspan = h(["span", 'class="boldtitle"'])
const sspan = h(["span", 'class="sspan"'])
const codespan = h(["span", 'class="codespan"'])


const build_hash = getBuildId();

const config        = JSON.parse(read(path.join(KLAB_OUT, "config.tmp.json")))
const parsed_tokens = JSON.parse(read(path.join(KLAB_OUT, "report.tmp.json")))
const prelude_path  = config.src.smt_prelude;
const prelude_hash  = sha3(read(prelude_path)).slice(0, 40)
const config_path   = config.src.specification;
const rule_paths    = config.src.rules;
const title         = path.basename(config_path, ".md");
const raw_rules     = rule_paths.map(p => read(p))
const rule_hashes   = raw_rules.map(str => sha3(str).slice(0, 40))
const badge = (name, status) => `<div class="double-val-label">
  <span class="${status}">
    ${status}
  </span>
</div>`


const mapCaseStatus = cases => cases
  .map(c => {
    const spec_path = path.join(KLAB_OUT, `meta/name/${c.name}`);
    const proofid = testPath(spec_path) && read(spec_path);
    const status = proofid
      && testPath(path.join(KLAB_OUT, `accept`, proofid))
      && `accept`
      || (proofid
        && testPath(path.join(KLAB_OUT, `reject`, proofid))
        && `reject`)
      || (proofid
        && testPath(path.join(KLAB_OUT, `meta`, `running`, proofid))
        && `running`)
      || (proofid
        && testPath(path.join(KLAB_OUT, `timeout`, proofid))
        && `timeout`)
      || (proofid
        && `queue`)
      || `blocked`
      ;
    const ret = {
      proofid,
      status,
      spec: c.name
    };
    if(status == 'accept' || status == 'reject') {
      var stats = fs.statSync(path.join(KLAB_OUT, status, proofid));
      var mtime = new Date(stats.mtime);
      ret.date = moment(mtime).format('YYYY-MM-DD, HH:mm');

      const duration_raw = fs.readFileSync(path.join(KLAB_OUT, 'meta', 'time', proofid));
      const duration = (/\d*/).exec(duration_raw)[0]
      ret.duration = Math.floor(duration / 60) + ' min ' + (duration % 60) + ' sec'
    }
    return ret;
  })

const __a2n = act => act.subject + "_" + act.name;
const getBadges = (cases, act) => {

  const status = mapCaseStatus(cases)

  const links = cases
    .map((c, i) => [c, status[i]])
    .sort((a, b) => {
      let s = x => ['accept', 'running', 'queue', 'blocked', 'reject', 'timeout'].indexOf(x.status)
      return s(a[1]) - s(b[1]);
    })
    .map(([c, s]) => {
      var proof_info = [
        td(codespan((s.proofid || "").slice(0, 8)) + span( s.status !== 'blocked' ? h(["a", `href="/${s.proofid + ".k"}"`])(s.spec+'.k') : s.spec + '.k'))
      ]

      var zip = '';

      const rejected = s.status == 'reject' || s.status == 'timeout';
      const accepted = s.status == 'accept';
      const finished = accepted || rejected;

      proof_info.push(td(finished ? bspan("finished:") + span(s.date) + bspan("in") + span(s.duration) : ""))
      // proof_info.push(td(finished ?  : ""))


      proof_info.push(td(
           rejected && [
            sspan(h(['a', `href="/${config.name}/${s.proofid}.log"`])('stdout')),
            sspan(h(['a', `href="/${config.name}/${s.proofid}.err.log"`])('stderr')),
          ]
        || accepted && [
          sspan(h(['a', `href="https://proof.dapp.ci/#${s.proofid}"`])('inspect-proof'))
        ]
        || ''
      ))

      proof_info.push(td(badge(c.suffix, s.status)))

      if(rejected) {
        zip = tr(`<td colspan="4" class="zipselect">${h(['input', `class="autoselect" type="text" value="klab fetch http://dapp.ci/${config.name}/${s.proofid+'.zip'}" onfocus="this.select()"`])("")}</td>`)
      }

      return h(["tr", `class="${s.status}"`])(proof_info) + zip
    })
    .join('\n')
  return {
    type: "html",
    text: `<div class="actstatus">${table(links)}</div>`,
    pre: false
  }
};



const genCoverageReport = (proofs) => {

  const coverage = Object.keys(config.contracts)
    .map(contract_name => {
      const c = config.contracts[contract_name];
      const abi_signatures = JSON.parse(c.abi)
        .filter(fabi => fabi.type == 'function')
        .map(fabi => `${fabi.name}(${fabi.inputs.map(i => i.type).join(',')})`);

      const abi_functions = abi_signatures
        .map(sig => ({
          sig,
          accept: proofs[contract_name + '.' + sig] && proofs[contract_name + '.' + sig].accept || 0,
          reject: proofs[contract_name + '.' + sig] && proofs[contract_name + '.' + sig].reject || 0,
          timeout: proofs[contract_name + '.' + sig] && proofs[contract_name + '.' + sig].timeout || 0,
          running: proofs[contract_name + '.' + sig] && proofs[contract_name + '.' + sig].running || 0,
          total: proofs[contract_name + '.' + sig] && proofs[contract_name + '.' + sig].total || 0,
          msg: !proofs[contract_name + '.' + sig] ? 'not specified' : ''
        }))
        .sort((a, b) => a.sig < b.sig ? -1 : 1)

      const lemmas = Object.keys(proofs)
        .filter(key => (new RegExp("^" + contract_name + "\\.")).test(key))
        .filter(key => abi_signatures.map(sig => contract_name + "." + sig).indexOf(key) == -1)
        .map(key => ({
          sig: key.slice(contract_name.length + 1),
          accept: proofs[key].accept,
          reject: proofs[key].reject,
          timeout: proofs[key].timeout,
          running: proofs[key].running,
          total: proofs[key].total,
          msg: ''
        }))
        .sort((a, b) => a.sig < b.sig ? -1 : 1)

      const contract_coverage = abi_functions.concat(lemmas)
        .map(f => f.accept)
        .sort((a, b) => a.sig < b.sig ? -1 : 1)
        .reduce((a, b) => a + b, 0)
      return {
        name: contract_name,
        abi_functions,
        lemmas,
        coverage: contract_coverage,
        total: abi_functions.concat(lemmas).reduce((a, o) => a + o.total, 0)
      }
    })

  const contract_coverage = coverage
    .map(cc => {
      const render = o => {
        let sig = o.total > 0
          ? `<a href="#${cc.name+"_"+o.sig}">${o.sig}</a>`
          : o.sig
        return `<tr class="${o.accept == o.total && o.total > 0 ? "" : "outstanding"}">
        <td class="status ${o.accept > 0 ? "accept" : "empty"}">
          ${o.accept > 0 ? o.accept : "-"}
        </td>
        <td class="status ${o.reject > 0 ? "reject" : "empty"}">
          ${o.reject > 0 ? o.reject : "-"}
        </td>
        <td class="status ${o.timeout > 0 ? "timeout" : "empty"}">
          ${o.timeout > 0 ? o.timeout : "-"}
        </td>
        <td class="status ${o.running > 0 ? "running" : "empty"}">
          ${o.running > 0 ? o.running : "-"}
        </td>
        <td class="status ${o.total > 0 ? "" : "empty"}">
          ${o.total > 0 ? o.total : "-"}
        </td>
        <td class="sig">${sig}</td>
        <td>
          ${o.msg}
        </td>
        </tr>`
      }
      const abi_list = cc
        .abi_functions
        .map(render)
        .join('\n')
      const lemmas_list = cc
        .lemmas
        .map(render)
        .join('\n')
      const lemmas_str = lemmas_list.length == 0 ? "" : `
        <span class="lemmas">lemmas:</span>
        <table class="lemmas">${lemmas_list}</table>`
      return `<li class="contract_coverage">
        <span class="name">${cc.name}</span>
        <span class="progress">${Math.floor(cc.coverage)} / ${cc.total}</span>
        <table class="abi">${abi_list}</table>
        ${lemmas_str}
        </li>`
    })

  return `<ul class="contract_coverage">${contract_coverage.join('\n')}</ul>`
}

const stats_object = [
  ["Klab version", `<a href="https://github.com/dapphub/klab/tree/${klab_HEAD}">${klab_HEAD}</a>`],
  ["EVM-semantics version", `<a href="https://github.com/kframework/evm-semantics/tree/${EVM_SEMANTICS_VERSION}">${EVM_SEMANTICS_VERSION}</a>`]
].concat(
  project_HEAD ? [[config.name + " version", `<a href="${config.url}/tree/${project_HEAD}">${project_HEAD}</a>`]] : []
).concat(
  rule_paths.map((rule_path, i) => [path.basename(rule_path), h(["a", `href="${path.basename(rule_path)}"`])(rule_hashes[i])])
).concat(
  prelude_path ? [[path.basename(prelude_path), h(["a", `href="${path.basename(prelude_path)}"`])(prelude_hash)]] : []
)

const stats = table(
    stats_object
      .map(([k, v]) => tr(td(k) + td(v)))
      .join("\n")
)

const proofs = parsed_tokens
  .filter(o => o.type == 'code' && o.lang === "act")
  .map(o => {
    const contract_name = config.implementations[o.obj.subject];
    const cstatus = mapCaseStatus(o.cases)
    return {
      contract: contract_name.name,
      sig: o.obj.signature || "lemma." + o.obj.name,
      accept: cstatus.filter(o => o.status == 'accept').length,
      reject: cstatus.filter(o => o.status == 'reject').length,
      running: cstatus.filter(o => o.status == 'running').length,
      timeout: cstatus.filter(o => o.status == 'timeout').length,
      total: cstatus.length,
      proofs: cstatus
    }
  })
  .reduce((a, o) => {
    const id = o.contract + '.' + o.sig;
    if(id in a) {
      a[id].accept += o.accept;
      a[id].reject += o.reject;
      a[id].running += o.running;
      a[id].timeout += o.timeout;
      a[id].total += o.total;
      a[id].proofs = a[id].proofs.concat(o.proofs)
    } else {
      a[id] = o;
    }
    return a;
  }, {})

const enriched_tokens = [{
  type: 'html',
  text: `<div id="stats">${stats}</div><div id="coverage">${genCoverageReport(proofs)}</div>`
}].concat(parsed_tokens
  .reduce((a, t) => {
    return a.concat(t.type == "code" && t.lang === "act" ? [{...t, type: "html", text: t.text}, getBadges(t.cases, t.obj)] : t)
  }, []))
enriched_tokens.links = {};

const body = marked.parser(enriched_tokens);
const htmlTemplate = read(path.join(__dirname, "../resources/report.tmp.html"));

const htmlString = render(htmlTemplate, {
  body,
  title
})

ensureDir(path.join(KLAB_OUT, 'report'))
fs.writeFileSync(path.join(KLAB_OUT, 'report', 'index.html'), htmlString);

const json_report = {
  [build_hash]: {
    date: new Date(),
    proofs
  },
  url: config.url,
  name: config.name
}
fs.writeFileSync(path.join(KLAB_OUT, 'report', 'report.json'), JSON.stringify(json_report))
console.log(new Date());
