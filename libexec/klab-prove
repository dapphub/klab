#!/usr/bin/env bash

set -e

red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
bold=$(tput bold)
reset=$(tput sgr0)

# parse args
usage() { echo "Usage: klab prove [-d] <spec>" 1>&2; exit 1; }
OPTS=`getopt -o "d" -l "dump" -- "$@"`
dump=false
if [ $? != 0 ]
then
    exit 1
fi
eval set -- "$OPTS"
while true; do
    case "$1" in
	-d | --dump)  dump=true; shift;;
	--)           shift; break;;
	*)            usage
    esac
done
target_spec=$1
if [ -z "$target_spec" ]; then
    usage
fi


# check env vars
if [ -z "$KLAB_OUT" ]; then
    echo "KLAB_OUT not set, defaulting to ./out/"
    export KLAB_OUT=out
fi
if [ -z "$KLAB_EVMS_PATH" ]; then
    echo "KLAB_EVMS_PATH must be set and point to evm-semantics!"
    exit 1
fi
echo "Using evm-semantics from $KLAB_EVMS_PATH"



spec_hash=$("${0%/*/*}/bin/klab" hash "$target_spec")

if $dump; then
    dump_flags="--state-log --state-log-path $KLAB_OUT/data --state-log-id $spec_hash --state-log-events OPEN,REACHINIT,REACHTARGET,REACHPROVED,RULE,SRULE,NODE,RULEATTEMPT,IMPLICATION,Z3QUERY,Z3RESULT,CLOSE"
    dump_notice="(with ${yellow}state logging${reset})"
fi

echo "Proof ${bold}STARTING${reset}:" "$(basename "$target_spec")" "$dump_notice"

logging=''
{
if [ ! -z "$QUIET" ]; then
    mkdir -p $KLAB_OUT/log/
    logging='> $KLAB_OUT/log/$spec_hash.log 2> $KLAB_OUT/log/$spec_hash.err.log'
fi
  K_OPTS=-Xmx10G \
    "$KLAB_EVMS_PATH/.build/k/k-distribution/target/release/k/bin/kprove" \
    $dump_flags \
    --directory "$KLAB_EVMS_PATH/.build/java/" \
    --def-module RULES \
    --output-omit "<programBytes> <program> <code> <previousGas> <touchedAccounts> <interimStates> <callStack> <callData> <substate> <previousHash> <ommersHash> <stateRoot> <transactionsRoot> <receiptsRoot> <logsBloom> <difficulty> <number> <gasLimit> <gasUsed> <extraData> <mixHash> <blockNonce> <ommerBlockHeaders> <blockhash> <txOrder> <txPending> <messages>" \
    --output-flatten "_Map_ #And" \
    --z3-impl-timeout 300 --deterministic-functions --no-exc-wrap \
    --cache-func-optimized --format-failures \
    --no-alpha-renaming \
    --no-sort-collections \
    --output json \
    --boundary-cells k,pc \
    --smt_prelude $KLAB_OUT/prelude.smt2 \
    --z3-tactic "(or-else (using-params smt :random-seed 3 :timeout 1000) (using-params smt :random-seed 2 :timeout 2000) (using-params smt :random-seed 1))" \
    "$target_spec" $logging
  result=$?
} || echo "weird error"

if [ "$result" == "0" ]; then
  echo "${green}Proof ${bold}ACCEPT${reset}:" "$(basename "$target_spec")" "$dump_notice"
  mkdir -p "$KLAB_OUT/accept" && touch "$KLAB_OUT/accept/$spec_hash"
else
  if [ "$result" == "130" ]; then
    echo 'Caught SIGINT'
  else
    echo "${red}Proof $result ${bold}REJECT${reset}:" "$(basename "$target_spec")" "$dump_notice"
    mkdir -p "$KLAB_OUT/reject" && touch "$KLAB_OUT/reject/$spec_hash"
  fi;
fi

exit $result
