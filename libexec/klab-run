#!/usr/bin/env node
const xs = require("xstream").default;
const {run} = require("@cycle/run");
const {docopt} = require("docopt");
const fs = require("fs");
const path = require("path");
const cliDriver = require("../lib/driver/cliDriver.js")
const remoteDriver = require("../lib/driver/remoteDriver.js")
const localDriver  = require("../lib/driver/localDriver.js");
const main = require("../lib/main.js")
const testPath = path => {
  try {
    fs.accessSync(path, fs.constants.F_OK);
    return true;
  } catch (e) {
    return false;
  }
}


const usage = `
Usage:
  klab run [options]

Options:
  --no-replay               No replay
  --remote
  --inspect=<id>
`

const cmd = docopt(usage, {
  argv: ["run"].concat(process.argv.slice(2))
});

const config = JSON.parse(fs.readFileSync("./config.json"));
if (testPath(config.source + ".json")) {
    config.solJson = JSON.parse(fs.readFileSync(config.source + ".json"));
    contract_path = config.source.replace('/','').replace('.','') + config.source.replace('./',':').replace('.sol','')
    contract_json = config.solJson.contracts[contract_path]
    config["bin_runtime"] = contract_json["bin-runtime"].toString();
    config["sourcemap"] = contract_json["srcmap-runtime"].toString();
}
else {
    config["bin_runtime"] = fs.readFileSync(config["bin_runtime"]).toString()
    config["sourcemap"] = fs.readFileSync(config["sourcemap"]).toString()
}



// READ the spec files
[
  "spec",
  "lemmas",
  "source",
].forEach(filetype => {
  let content = fs.readFileSync(config[filetype]).toString()
  config[filetype] = content;
})


//Check for a file of trusted lemmas (shortcuts) in the config
let shortcuts = '';
if (testPath(config["shortcuts"])) {
    shortcuts = fs.readFileSync(config.shortcuts).toString();
}
config.shortcuts = shortcuts;

//Check for a special z3 prelude to include or default to basic.smt2
let z3prelude;
if (testPath(config["z3prelude"])) {
    z3prelude = path.join(process.cwd(),config.z3prelude);
}
else {
    z3prelude = path.join(process.env.KLAB_EVMS_PATH, "./.build/k/k-distribution/include/z3/basic.smt2")
}
config.z3prelude = z3prelude;



const kDriver = cmd["--remote"]
  ? remoteDriver(config.host)
  : localDriver
  ;

const inspect = cmd["--inspect"];
if(inspect) config.inspect = inspect;

config.replay = !cmd["--no-replay"];

const drivers = {
  CLI: cliDriver,
  K: kDriver,
  Settings: () => xs.of(config)
};

run(main, drivers)
