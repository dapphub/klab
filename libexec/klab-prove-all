#!/usr/bin/env bash
set -e

red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
bold=$(tput bold)
reset=$(tput sgr0)

if [ -z "$KLAB_OUT" ]; then
  echo "KLAB_OUT not set, defaulting to ./out/"
  KLAB_OUT=out
fi

if [ -z "$KLAB_EVMS_PATH" ]; then
  echo "KLAB_EVMS_PATH must be set and point to evm-semantics!"
  exit 1
fi

export KLAB_OUT
export GAS_DIR=$KLAB_OUT/gas
export RUNNING_DIR=$KLAB_OUT/meta/running
export OBLIGATIONS=$KLAB_OUT/obligations.batch
export BATCH_LIMIT=6
export THREADS=${THREADS:-2}
export QUIET=1
PNAME=$(jq -r '.name' < config.json)
if [ "$PNAME" == "null" ]; then PNAME=""; fi
export PNAME

if [ -d ".git" ]; then
  export commit_hash=$(git rev-parse HEAD)
  if [ -n "$KLAB_REPORT_DIR" ]; then
    export KLAB_REPORT_NAME_DIR=$KLAB_REPORT_DIR/$PNAME
    export KLAB_REPORT_PROJECT_DIR=$KLAB_REPORT_DIR/$PNAME/$commit_hash
    mkdir -p "$KLAB_REPORT_PROJECT_DIR"
    if [ -n "$PNAME" ]; then
      klab setup-ci-project "$PNAME"
    fi;
    if [ ! -f "$KLAB_REPORT_DIR/$PNAME"/report.json ]; then
      echo "{}" > "$KLAB_REPORT_DIR/$PNAME"/report.json
    fi;
    jq -r '.src.rules[]' < config.json |xargs -I {} cp {} $KLAB_REPORT_PROJECT_DIR
    jq -r '.src.smt_prelude' < config.json |xargs -I {} cp {} $KLAB_REPORT_PROJECT_DIR
  fi;
fi;

report () {
  set -e
  if [ ! -z $KLAB_REPORT_NAME_DIR ]; then
    exec 3>"$KLAB_REPORT_NAME_DIR"/report.json.lock
    flock -x 3
  fi;
  klab report
  if [ -n "$KLAB_REPORT_PROJECT_DIR" ]; then
    cp "$KLAB_OUT/report/index.html" "$KLAB_REPORT_PROJECT_DIR"
    cat <<< $(jq -s '.[0] * .[1]' "$KLAB_REPORT_DIR/$PNAME"/report.json "$KLAB_OUT"/report/report.json) > "$KLAB_REPORT_DIR/$PNAME"/report.json
    echo "Report exported to $KLAB_REPORT_PROJECT_DIR"
  fi;
  if [ ! -z $KLAB_REPORT_NAME_DIR ]; then
    exec 3>&-
  fi;
}
export -f report

# perform a single proof and exit
do_proof () {
  set -e

  timeout () {
    touch "$KLAB_OUT/timeout/$hash";
    klab zip "$hash" > /dev/null
    cp "$KLAB_OUT/log/${hash}.zip" "$KLAB_REPORT_NAME_DIR"
  }
  trap timeout SIGTERM

  TIMER="/usr/bin/env time --quiet"
  # get the proof hash
  hash=$(klab hash "$1")
  # remember the name - first argument
  name=$1
  # report run
  touch "$RUNNING_DIR/$hash"
  report
  if [[ $name =~ .*_pass_oog$ ]]; then
    # --dump for all specs except OOG
    PROVE_FLAGS=""
  else
    PROVE_FLAGS="--dump"
  fi;
  set +e
  # run proof
  $TIMER -o "$KLAB_OUT/meta/time/$hash" klab prove $PROVE_FLAGS "$KLAB_OUT/specs/$name.k"
  result=$?
  if [ $result -ne "0" ]; then
    cat "$KLAB_OUT/log/${hash}.log"
    cat "$KLAB_OUT/log/${hash}.err.log"
  fi;
  if [ $result -ne "0" ] && [ -z $PROVE_FLAGS ]; then
    # run proof again with --dump if necessary
    PROVE_FLAGS="--dump"
    $TIMER -o "$KLAB_OUT/meta/time/$hash" klab prove $PROVE_FLAGS "$KLAB_OUT/specs/$name.k"
    result=$?
  fi;
  set -e
  # report finish
  rm "$RUNNING_DIR/$hash"
  report
  if [ -n "$KLAB_REPORT_PROJECT_DIR" ] && [ -n "$KLAB_WEBPROOF_DIR" ] && [ -n "$PROVE_FLAGS" ]; then
    if [ $result -ne "0" ]; then
      klab zip "$hash" > /dev/null
      cp "$KLAB_OUT/log/${hash}.zip" "$KLAB_REPORT_NAME_DIR"
      cp "$KLAB_OUT/log/${hash}.log" "$KLAB_REPORT_NAME_DIR"
      cp "$KLAB_OUT/log/${hash}.err.log" "$KLAB_REPORT_NAME_DIR"
    else
      # generate and upload bundle to proof.dapp.ci
      klab bundle --prune --evm "$hash"
      cp "$KLAB_OUT/log/boot_${hash}.json" "$KLAB_WEBPROOF_DIR"
    fi;
  fi;
  if [[ $name =~ .*_pass_rough$ ]]; then
    # gas analysis from the rough pass
    klab get-gas "$hash" > "$GAS_DIR/${hash}.raw.kast.json"
    klab gas-analyser --input "$GAS_DIR/${hash}.raw.kast.json" > "$GAS_DIR/${hash}.kast"
  fi;
  exit $result
}
export -f do_proof

function clean_running_dir {
  echo "trapped $RUNNING_DIR"
  rm -fdr "$RUNNING_DIR"
  report
}
trap clean_running_dir EXIT


make_batch () {
  if [ -n "$KLAB_REPORT_PROJECT_DIR" ]; then
    cp -n "$KLAB_OUT"/specs/*.k "$KLAB_REPORT_PROJECT_DIR"
  fi;
  # timeout after 3 hrs
  TIMEOUT=14400
  parallel -u --timeout $TIMEOUT -P "$THREADS" do_proof {} < "$OBLIGATIONS"
  # previously used:
  # xargs -P "$THREADS" -I % sh -xc 'do_proof %' < "$OBLIGATIONS"
  result=$?
  echo $result
  if [ $result -ge 255 ]; then
    echo "Parallel finished with exceptional code:" "$result"
    exit $result
  else
    klab build;
    return $result
  fi;
}

echo "Doing initial spec build, this may take a while..."
mkdir -p "$GAS_DIR"
mkdir -p "$RUNNING_DIR"
mkdir -p "$KLAB_OUT/meta/time"
mkdir -p "$KLAB_OUT/timeout"
klab build
count=1
failures=0
while [ -s "$OBLIGATIONS" ]; do
  if [ $count -gt "$BATCH_LIMIT" ]; then
    echo "${red} Exceeded batch limit, terminating!"
    exit 1
  fi;
  echo "${bold}STARTING${reset} proof batch $count."
  set +e
  make_batch
  result=$?
  set -e
  # > 100 means SIGINT, etc.
  if [ $result -gt 100 ]; then exit 1; fi
  # parallel exit code is number of failures
  failures+=$result
  count=$((count+1))
done;
echo "${bold}COMPLETE${reset}: no outstanding proof obligations."
klab gc --all
printf "Finished with %d failed proofs." $failures
if [ $failures -ge 1 ]; then
  exit 1
else
  exit 0
fi;

