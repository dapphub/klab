#!/usr/bin/env node
const xs = require("xstream").default;
const _ = require("lodash");
const {run} = require("@cycle/run");
const serverDriver = require("../lib/driver/serverDriver.js");
const kDriver = require("../lib/driver/kDriver.js");
const dbDriver = require("../lib/driver/dbDriver.js");
const makeDriver = require("../lib/driver/makeDriver.js");
const makeCliDriver  = require("../lib/driver/cliDriver.js");
const onionify = require('cycle-onionify').default;
const isolate = require('@cycle/isolate').default;
const sampleCombine = require("xstream/extra/sampleCombine").default;
const dropRepeats = require("xstream/extra/dropRepeats").default;
const flattenConcurrently = require("xstream/extra/flattenConcurrently").default;
process.title = "klab server";

const pure = require("../lib/pure.js");

const Queue = ({onion, Make, K}) => {

  const dequeue$ = onion.state$
    .filter(state => state.kstate === "IDLE" && state.queue.length > 0)
    .map(state => state.queue[0])

  const proof_start$ = dequeue$
    .compose(dropRepeats())
    .map(proofid => ({
      type: "start",
      proofid
    }))

  const initialReducer$ = xs.of(() => ({
    kstate: "IDLE",
    queue: []
  }))
  const enqueueReducer$ = Make
    .filter(msg => msg.type === "build")
    .map(msg => state => ({
      ...state,
      queue: _.uniq(state.queue.concat([msg.proofid]))
    }))
  const dequeueReducer$ = dequeue$
    .map(_ => state => {
      state.kstate = "RUNNING";
      state.queue = state.queue.slice(1);
      return Object.assign({}, state);
    })
  const idleReducer$ = K
    .filter(msg => msg.type == "stop")
    .map(_ => state => {
      return {
        ...state,
        kstate: "IDLE"
      };
    })

  return {
    onion: xs.merge(
      initialReducer$,
      dequeueReducer$,
      enqueueReducer$,
      idleReducer$
    ),
    K: proof_start$
  }
}

const main = ({onion, Server, K, Make, Db}) => {

  // Cli
  //   .filter(key => key === "\u0003")
  //   .addListener({
  //     next: e => process.exit()
  //   })
  //
  // const view$ = onion.state$
  //   .map(state => {
  //     return {
  //       main: JSON.stringify(state, false, 2)
  //     }
  //   })

  const dbquery$ = Server
    .filter(msg => [
      "getblob"
      // "getrule"
    ].indexOf(msg.type) > -1)
  const kmsg$ = Db
    .filter(msg => msg.type == "msg")
    .map(msg => Object.assign({}, pure(msg), {
      proofid: msg.proofid,
      peer: msg.peer
    }))
    .filter(msg => msg.type !== "unknown")
  const notkmsg$ = Db
    .filter(msg => msg.type != "msg")

  const process$ = Server
    .filter(msg => msg.type === "run")
    .map(msg => Object.assign({}, msg, {type: "make"}))

  const subscribe$ = Make
    .filter(msg => msg.type === "build" || msg.type === "syncing")
    .map(msg => ({
      ...msg,
      type: "subscribe"
    }))
  const unsubscribe$ = Server
    .filter(msg => msg.type == "disconnected")
    .map(msg => ({
      ...msg,
      type: "unsubscribe"
    }))

  const queueSinks = isolate(Queue, "queue")({
    onion, Make, K
  })

  return {
    Server:  xs.merge(
      Make,
      kmsg$,
      notkmsg$
    ),
    Make: process$,
    K: queueSinks.K,
    Db: xs.merge(
      subscribe$,
      unsubscribe$,
      dbquery$
    ),
    onion: queueSinks.onion,
    // Cli: view$
  };
}

const drivers = {
  Server: serverDriver(),
  K: kDriver,
  Make: makeDriver,
  Db: dbDriver,
  // Cli: makeCliDriver({
  //   in: false,
  //   type: "console"
  // })
};

const wrappedMain = onionify(main);

run(wrappedMain, drivers)
