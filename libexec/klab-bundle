#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const {docopt}      = require("docopt");
const {
  testPath,
  read,
  ensureDir,
  warn
} = require("../lib/util.js");
const { genBehaviour } = require("../lib/behavior.js");

const KLAB_WD_PATH = path.join(process.env.TMPDIR, "klab");
const KLAB_OUT     = process.env.KLAB_OUT || "out";

// const config_json   = JSON.parse(fs.readFileSync("./config.json"));
// const makeConfig        = require("../lib/config.js");

const usage = `
Usage:
  klab bundle [options] <hash>

Options:
  --prune
  --evm
  --rules
`

const cmd = docopt(usage, {
  argv: ["bundle"].concat(process.argv.slice(2))
});
const PRUNE         = cmd["--prune"] || false;
const EVM           = cmd['--evm']   || false;
const RULES         = cmd['--rules'] || false;

const proofid = cmd['<hash>'];

const {
  prune_edges,
} = require("../lib/compile.js");

const {
  buildDisplayInfo
} = require('../lib/clean-evm-node.js');

const {pruned_edges, initt, finished, steps} = prune_edges(proofid, {prune: PRUNE, rules: RULES});

const blobs = Object.keys(Object.keys(pruned_edges)
  .map(ekey => pruned_edges[ekey]
    .map(e => e.from.split("_").concat(e.to.split("_")))
    .reduce((a, es) => a.concat(es), [])
  )
  .reduce((a, es) => a.concat(es), [])
  .reduce((a, blob) => {a[blob] = true; return a;}, {}))

ensureDir(path.join(KLAB_OUT, "log"));
const pruned_path = path.join(KLAB_OUT, "log", `boot_${proofid}.json`);
const blobs_data = blobs
  .map(blobid => [blobid, JSON.parse(read(path.join(KLAB_WD_PATH, `${proofid}_blobs`, blobid + ".json")))])

const filter = EVM
  ? buildDisplayInfo
  : t => t;

const compiled_states = blobs_data
  .filter(([_, k]) => k.term.label == "<generatedTop>")
  // filtering
  .map(([blobid, k]) => [blobid, filter(k.term)])

const constraints = blobs_data
  .filter(([_, k]) => k.term.label != "<generatedTop>")

const compiled_blobs = compiled_states.concat(constraints)
  .reduce((a, [blobid, k]) => ({...a, [blobid]: k}), {})



const meta_path = path.join(KLAB_OUT, 'meta', 'data', proofid);
var meta = {};
// TODO - warn - no metadata provided
if(testPath(meta_path)) {
  meta = JSON.parse(read(meta_path))
} else {
  warn(`no meta information found at ${meta_path}`);
}

// translate
const mem = {}
var memc = 1;
const code = id => mem[id] && mem[id].toString(36);
const rename = id => code(id) || (mem[id] = memc++) && code(id)
const rr = ids => ids.split('_').map(rename).join('_');

const finished_ = finished
  .reduce((a, node) => ({...a, [rr(node)]: true}), {});

const nodes_ = Object.keys(compiled_blobs)
  .reduce((a, key) => {
    a[rr(key)] = compiled_blobs[key]
    return a
  }, {})
const edges_ = Object.keys(pruned_edges)
  .reduce((a, key) => {
    a[rr(key)] = pruned_edges[key].map(e => ({from: rr(e.from), to: rr(e.to)}))
    return a;
  }, {})

const boot = {
  edges: edges_,
  initt: rr(initt),
  config: meta,
  nodes: nodes_,
  finished: finished_,
  steps: steps.reduce((a, step) => { a[rr(step)] = true; return a; }, {}),
  path: [{
    "type": "step",
    "count": 0,
    "step": {
      "from": "",
      "to": rr(initt),
      "rule": ""
    }
  }]
};

// if(EVM) {
//   // Object.keys(boot.edges).forEach(e => {
//   //   boot.edges[e].forEach(eO => { eO.rule = 1; });
//   // })
//   // boot.steps = {
//   //   1: true
//   // };
// }

// const nodes_ = blobs_data
//   .filter(([_, k]) => k.term.label == "<generatedTop>")


// const { behaviour } = genBehaviour({
//         nodes: [],
//         edges: [],
//         ...boot,
//         nodes: nodes_
//       });
// // console.log(JSON.stringify(behaviour, false, 2));
// boot.status = behaviour.success
//   ? "ACCEPT"
//   : "REJECT"

const boot_json_str = JSON.stringify(boot);
fs.writeFileSync(pruned_path, boot_json_str);

console.log(`compiled file is: ~${Math.floor(boot_json_str.length / 10485.76) / 100} MB`);
console.log(`saved to ${pruned_path}`);
