#!/usr/bin/env node
const xs = require("xstream").default;
const {run} = require("@cycle/run");
const {docopt} = require("docopt");
const fs = require("fs");
const path = require("path");
const onionify = require('cycle-onionify').default;
const sampleCombine = require("xstream/extra/sampleCombine").default;
process.title = "klab";

const makeConfig = require("../lib/config.js");
const makeCliDriver = require("../lib/driver/cliDriver.js")
const dbDriver = require("../lib/driver/dbDriver.js")
const move = require("../lib/move.js");
const exec = require("../lib/exec.js");
const view = require("../lib/view.js");
const link = require("../lib/link.js");
const pull = require("../lib/pull.js");
const { genBehaviour } = require("../lib/behavior.js");
const {
  prune_edges,
} = require("../lib/compile.js");
const {
  testPath,
  revert,
  warn,
  read,
  sha3
} = require("../lib/util.js");

const KLAB_OUT = process.env.KLAB_OUT || "out";
const KLAB_WD_PATH = path.join(process.env.TMPDIR, "klab");

const usage = `
Usage:
  klab inspect [options] <hash>
`

const cmd = docopt(usage, {
  argv: ["inspect"].concat(process.argv.slice(2))
});

const proofid = cmd['<hash>'];

const {pruned_edges, initt, finished, steps} = prune_edges(proofid);
const finished_ = finished
  .reduce((a, node) => ({...a, [node]: true}), {});
const steps_ = steps
  .reduce((a, step) => { a[step] = true; return a; }, {});
// generate coedges
const coedges = Object.keys(pruned_edges)
  .reduce((coedges, from) =>
    pruned_edges[from]
      .reduce((a, toO) => ({...a, [toO.to]: (a[toO.to]||[]).concat(toO)}), coedges)
  , {})

// preload constraints and rules
const rule_blobs = Object.keys(Object.keys(pruned_edges)
  .map(ekey => pruned_edges[ekey].map(e => e.rule)
  )
  .reduce((a, es) => a.concat(es), [])
  .reduce((a, blob) => {a[blob] = true; return a;}, {}))

const constraint_blobs = Object.keys(Object.keys(pruned_edges)
  .map(ekey => pruned_edges[ekey]
    .map(e => [e.from.split("_")[1], e.to.split("_")[1]])
    .reduce((a, es) => a.concat(es), [])
  )
  .reduce((a, es) => a.concat(es), [])
  .reduce((a, blob) => {a[blob] = true; return a;}, {}))

const blobs_data = constraint_blobs
  .map(blobid => [blobid, JSON.parse(read(path.join(KLAB_WD_PATH, `${proofid}_blobs`, blobid + ".json")))])
  .reduce((a, [id, json]) => ({...a, [id]: json.term}), {})

const rules_data = rule_blobs
  .map(blobid => [blobid, JSON.parse(read(path.join(KLAB_WD_PATH, `${proofid}_blobs`, blobid + ".json")))])
  .reduce((a, [id, json]) => ({...a, [id]: json.term}), {})

const state = {
  edges: pruned_edges,      // done: klab compile-fsm
  coedges,
  initt,                    // done: klab compile-fsm
  finished: finished_,      // done: klab compile-fsm
  steps: steps_,
  nodes: blobs_data,
  rules: rules_data,
  path: [{
    "type": "step",
    "count": 0,
    "step": {
      "from": "",
      "to": initt,
      "rule": ""
    }
  }]
};

const meta_path = path.join(KLAB_OUT, 'meta', 'data', proofid);
var meta = {};
if(testPath(meta_path)) meta = JSON.parse(read(meta_path))
const config = {
  ...meta,
  control: {
    "0"      : "branch 0",
    "1"      : "branch 1",
    "2"      : "branch 2",
    "3"      : "branch 3",
    "4"      : "branch 4",
    "5"      : "branch 5",
    "6"      : "branch 6",
    "S-n"    : "next_k",
    "S-p"    : "prev_k",
    "n"      : "next_step",
    "p"      : "prev_step",
    "C-n"    : "next_branch",
    "C-p"    : "prev_branch",
    "e"      : "toggle_module evm",
    "g"      : "toggle_module gas",
    "m"      : "toggle_module memory",
    "b"      : "toggle_module behaviour",
    "c"      : "toggle_module constraint",
    "s"      : "toggle_module sourcemap",
    "r"      : "toggle_module rule",
    "k"      : "toggle_module kcell",
    "z"      : "toggle_module z3feedback",
    "d"      : "toggle_module debug",
    "t"      : "toggle_module term",
    "up"     : "scroll_up",
    "down"   : "scroll_down"
  },
  proofid
};

const CLIDriver = makeCliDriver({
    // type: "console",
    // in: false
  })

const { behaviour } = genBehaviour(state);

const drivers = {
  K: dbDriver,
  CLI: CLIDriver,
  Settings: () => xs.of({...state, config, behaviour, show: {}})
};

const main = ({ CLI, Settings, onion, K }) => {

  const boot$ = Settings
    .map(state => () => state)

  CLI
    .filter(key => key.full == "C-c")
    .addListener({
      next: i => process.exit(),
      error: err => console.error(err),
      complete: () => console.log('completed'),
    })

  const cmd$ = CLI
    .compose(sampleCombine(onion.state$))
  // only if not in cmd_mode
    .filter(([_, state]) => !state.cmd_mode)
  // .map(([key, _]) => key)
  // find the command
    .map(([key, state]) => [key.full, state.config.control[key.full]])
    .filter(([key, cmd]) => !!cmd)
    .map(([key, cmd]) => cmd && ({ key, cmd }))
  // costom command
  const {ccmd$, crun$} = exec({CLI, onion});

  // update state based on user input
  const move$ = xs.merge(cmd$, crun$)
    .compose(move)

  let link$ = K
    .compose(link);
  const {
    pull$
  } = pull({K, onion})

  let view$ = view({onion});

  return {
    CLI: view$,
    K: pull$,
    onion: xs.merge(
      link$,
      move$,
      boot$,
      ccmd$
    )
  };
};

const wrappedMain = onionify(main);

run(wrappedMain, drivers)
