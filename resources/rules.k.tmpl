// VERIFICATION.k

    rule #rangeUInt    (   1 ,      X ) => #range ( 0               <= X <= 1               ) [macro]

    syntax Int ::= nthbyteof ( Int , Int , Int ) [function, smtlib(smt_nthbyteof), proj]
 // ------------------------------------------------------------------------------
    rule nthbyteof(V, I, N) => nthbyteof(V /Int 256, I, N -Int 1) when N  >Int (I +Int 1) [concrete]
    rule nthbyteof(V, I, N) =>           V modInt 256             when N ==Int (I +Int 1) [concrete]

    rule bool2Word(notBool(A ==K 0)) => A
         requires #rangeUInt(1, A)

    //Blasphemy
    rule notBool(notBool(A)) => A

    rule ( WS1 ++ WS2 ) ++ WS3 => WS1 ++ ( WS2 ++ WS3 )


    // Same rules exist in KEVM, but are marked [concrete]. Allowing them for symbolic arguments here.

    rule #lookup( (KEY |-> VAL) M, KEY ) => VAL
    rule #lookup(               M, KEY ) => 0 requires notBool KEY in_keys(M)

    rule #range(WM, START, WIDTH) => #range(WM, START +Int WIDTH -Int 1, WIDTH, .WordStack)

    rule WM[ N := W : WS     ] => (WM[N <- W])[N +Int 1 := WS]

    //semantics of #buf
    rule #buf(LEN, BYTES) => #padToWidth(LEN, #asByteStack( BYTES ))


//Operator direction normalization rules. Required to reduce the number of forms of inequalities that can be matched by general lemmas. We chose to keep <Int and <=Int because those operators are used in all range lemmas and in #range macros. Operators >Int and >=Int are still allowed anywhere except rules LHS. In all other places they will be matched and rewritten by rules below.
rule notBool (X <Int Y)  => Y <=Int X
rule notBool (X <=Int Y) => Y <Int X
rule notBool (X >Int Y)  => X <=Int Y
rule notBool (X >=Int Y) => X <Int Y



    rule 0 <=Int nthbyteof(V, I, N)          => true
    rule         nthbyteof(V, I, N) <Int 256 => true

    rule #asWord( nthbyteof(V,  0, 32)
                : nthbyteof(V,  1, 32)
                : nthbyteof(V,  2, 32)
                : nthbyteof(V,  3, 32)
                : nthbyteof(V,  4, 32)
                : nthbyteof(V,  5, 32)
                : nthbyteof(V,  6, 32)
                : nthbyteof(V,  7, 32)
                : nthbyteof(V,  8, 32)
                : nthbyteof(V,  9, 32)
                : nthbyteof(V, 10, 32)
                : nthbyteof(V, 11, 32)
                : nthbyteof(V, 12, 32)
                : nthbyteof(V, 13, 32)
                : nthbyteof(V, 14, 32)
                : nthbyteof(V, 15, 32)
                : nthbyteof(V, 16, 32)
                : nthbyteof(V, 17, 32)
                : nthbyteof(V, 18, 32)
                : nthbyteof(V, 19, 32)
                : nthbyteof(V, 20, 32)
                : nthbyteof(V, 21, 32)
                : nthbyteof(V, 22, 32)
                : nthbyteof(V, 23, 32)
                : nthbyteof(V, 24, 32)
                : nthbyteof(V, 25, 32)
                : nthbyteof(V, 26, 32)
                : nthbyteof(V, 27, 32)
                : nthbyteof(V, 28, 32)
                : nthbyteof(V, 29, 32)
                : nthbyteof(V, 30, 32)
                : nthbyteof(V, 31, 32)
                : .WordStack ) => V
      requires 0 <=Int V andBool V <Int pow256


    rule #asWord( nthbyteof(#unsigned(V),  0, 32)
                : nthbyteof(#unsigned(V),  1, 32)
                : nthbyteof(#unsigned(V),  2, 32)
                : nthbyteof(#unsigned(V),  3, 32)
                : nthbyteof(#unsigned(V),  4, 32)
                : nthbyteof(#unsigned(V),  5, 32)
                : nthbyteof(#unsigned(V),  6, 32)
                : nthbyteof(#unsigned(V),  7, 32)
                : nthbyteof(#unsigned(V),  8, 32)
                : nthbyteof(#unsigned(V),  9, 32)
                : nthbyteof(#unsigned(V), 10, 32)
                : nthbyteof(#unsigned(V), 11, 32)
                : nthbyteof(#unsigned(V), 12, 32)
                : nthbyteof(#unsigned(V), 13, 32)
                : nthbyteof(#unsigned(V), 14, 32)
                : nthbyteof(#unsigned(V), 15, 32)
                : nthbyteof(#unsigned(V), 16, 32)
                : nthbyteof(#unsigned(V), 17, 32)
                : nthbyteof(#unsigned(V), 18, 32)
                : nthbyteof(#unsigned(V), 19, 32)
                : nthbyteof(#unsigned(V), 20, 32)
                : nthbyteof(#unsigned(V), 21, 32)
                : nthbyteof(#unsigned(V), 22, 32)
                : nthbyteof(#unsigned(V), 23, 32)
                : nthbyteof(#unsigned(V), 24, 32)
                : nthbyteof(#unsigned(V), 25, 32)
                : nthbyteof(#unsigned(V), 26, 32)
                : nthbyteof(#unsigned(V), 27, 32)
                : nthbyteof(#unsigned(V), 28, 32)
                : nthbyteof(#unsigned(V), 29, 32)
                : nthbyteof(#unsigned(V), 30, 32)
                : nthbyteof(#unsigned(V), 31, 32)
                : .WordStack ) => #unsigned(V)
      requires #rangeSInt(256, V)

    rule #asWord( nthbyteof(keccakIntList(V),  0, 32)
                : nthbyteof(keccakIntList(V),  1, 32)
                : nthbyteof(keccakIntList(V),  2, 32)
                : nthbyteof(keccakIntList(V),  3, 32)
                : nthbyteof(keccakIntList(V),  4, 32)
                : nthbyteof(keccakIntList(V),  5, 32)
                : nthbyteof(keccakIntList(V),  6, 32)
                : nthbyteof(keccakIntList(V),  7, 32)
                : nthbyteof(keccakIntList(V),  8, 32)
                : nthbyteof(keccakIntList(V),  9, 32)
                : nthbyteof(keccakIntList(V), 10, 32)
                : nthbyteof(keccakIntList(V), 11, 32)
                : nthbyteof(keccakIntList(V), 12, 32)
                : nthbyteof(keccakIntList(V), 13, 32)
                : nthbyteof(keccakIntList(V), 14, 32)
                : nthbyteof(keccakIntList(V), 15, 32)
                : nthbyteof(keccakIntList(V), 16, 32)
                : nthbyteof(keccakIntList(V), 17, 32)
                : nthbyteof(keccakIntList(V), 18, 32)
                : nthbyteof(keccakIntList(V), 19, 32)
                : nthbyteof(keccakIntList(V), 20, 32)
                : nthbyteof(keccakIntList(V), 21, 32)
                : nthbyteof(keccakIntList(V), 22, 32)
                : nthbyteof(keccakIntList(V), 23, 32)
                : nthbyteof(keccakIntList(V), 24, 32)
                : nthbyteof(keccakIntList(V), 25, 32)
                : nthbyteof(keccakIntList(V), 26, 32)
                : nthbyteof(keccakIntList(V), 27, 32)
                : nthbyteof(keccakIntList(V), 28, 32)
                : nthbyteof(keccakIntList(V), 29, 32)
                : nthbyteof(keccakIntList(V), 30, 32)
                : nthbyteof(keccakIntList(V), 31, 32)
                : .WordStack ) => keccakIntList(V)

    rule #asWord( nthbyteof(#symEcrec(MSG, V, R, S),  0, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S),  1, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S),  2, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S),  3, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S),  4, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S),  5, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S),  6, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S),  7, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S),  8, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S),  9, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 10, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 11, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 12, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 13, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 14, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 15, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 16, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 17, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 18, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 19, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 20, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 21, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 22, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 23, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 24, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 25, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 26, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 27, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 28, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 29, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 30, 32)
                : nthbyteof(#symEcrec(MSG, V, R, S), 31, 32)
                : .WordStack ) => #symEcrec(MSG, V, R, S)


rule ACCTCODE in SetItem( 1 )
                 SetItem ( 2 )
                 SetItem ( 3 )
                 SetItem ( 4 )
                 SetItem ( 5 )
                 SetItem ( 6 )
                 SetItem ( 7 )
                 SetItem ( 8 )
                 => false
     requires 9 <=Int ACCTCODE

    syntax IntList ::= bytesToWords ( WordStack )       [function]

 // --------------------------------------------------------------
    rule bytesToWords ( WS )
         => #asWord(#take(#sizeWordStack(WS) modInt 32, WS)) byteStack2IntList(#drop(#sizeWordStack(WS) modInt 32, WS))
         requires 0 <Int #sizeWordStack(WS) modInt 32

    rule bytesToWords ( WS ) => byteStack2IntList(WS)
         requires #sizeWordStack(WS) modInt 32 ==Int 0

// for terms came from bytecode not via #hashedLocation
    rule keccak(WS) => keccakIntList(bytesToWords(WS))
      requires ( notBool #isConcrete(WS) )

    rule 0 <=Int keccakIntList(N)     => true
    rule keccaktIntList(N) <Int pow256 => true


    rule #padToWidth(32, #asByteStack( #unsigned(V) )) => #asByteStackInWidth( #unsigned(V), 32)
      requires #rangeSInt(256, V)


    rule #padToWidth(32, #asByteStack(V)) => #asByteStackInWidth(V, 32)
      requires 0 <=Int V andBool V <Int pow256


    rule #padToWidth(32, #asByteStack( keccakIntList (V) )) => #asByteStackInWidth( keccakIntList (V), 32)

    rule #padToWidth(32, #asByteStack( #symEcrec(MSG, V, R, S) )) => #asByteStackInWidth( #symEcrec(MSG, V, R, S), 32)


   // for Vyper
    rule #padToWidth(N, #asByteStack(#asWord(WS))) => WS
      requires #sizeWordStack(WS) <=Int 32 andBool N ==Int #sizeWordStack(WS)

    // storing a symbolic boolean value in memory
    rule #padToWidth(32, #asByteStack(bool2Word(E)))
      => #asByteStackInWidthaux(0, 30, 32, nthbyteof(bool2Word(E), 31, 32) : .WordStack)

      
    // for Solidity (WORDSTACK)
    rule #asWord(WS) /Int D => #asWord(#take(#sizeWordStack(WS) -Int log256Int(D), WS))
      requires D modInt 256 ==Int 0 andBool D >=Int 0
       andBool #sizeWordStack(WS) >=Int log256Int(D)
       andBool #sizeWordStack(WS) <=Int 32

    // for Solidity >= 0.5.6 (WORDSTACK)
    rule #asWord(WS) >>Int D => #asWord(#take(#sizeWordStack(WS) -Int (D /Int 8), WS))
     requires D modInt 8 ==Int 0 andBool D >=Int 0
       andBool #sizeWordStack(WS) >=Int (D /Int 8)
       andBool #sizeWordStack(WS) <=Int 32
    rule #sizeWordStack(#take(N, _)) => N
    rule #sizeWordStack(#take(N, _), M) => N +Int M

    // for Solidity (BYTEARRAY)
    rule #asWord(WS) /Int D => #asWord(WS [0 .. #sizeByteArray(WS) -Int log256Int(D)])
      requires D modInt 256 ==Int 0 andBool D >=Int 0
       andBool #sizeByteArray(WS) >=Int log256Int(D)
       andBool #sizeByteArray(WS) <=Int 32

    // for Solidity >= 0.5.6 (BYTEARRAY)
    rule #asWord(BS) >>Int D => #asWord(BS [0 .. #sizeByteArray(BS) -Int (D /Int 8)])
     requires D modInt 8 ==Int 0 andBool D >=Int 0
       andBool #sizeByteArray(BS) >=Int (D /Int 8)
       andBool #sizeByteArray(BS) <=Int 32

    rule #sizeByteArray(BS [0 .. N]) => N

    rule BS [0 .. N] [0 .. M] => BS [0 .. M]
    requires M <=Int N

    syntax WordStack ::= #asByteStackInWidth    ( Int, Int )                 [function]
                       | #asByteStackInWidthaux ( Int, Int, Int, WordStack ) [function]
 // -----------------------------------------------------------------------------------
    rule #asByteStackInWidth(X, N) => #asByteStackInWidthaux(X, N -Int 1, N, .WordStack)

    rule #asByteStackInWidthaux(X, I, N, WS) => #asByteStackInWidthaux(X, I -Int 1, N, nthbyteof(X, I, N) : WS) when I >Int 0
    rule #asByteStackInWidthaux(X, 0, N, WS) => nthbyteof(X, 0, N) : WS

    rule 0 +Int N => N
    rule N +Int 0 => N

    rule N -Int 0 => N

    rule 1 *Int N => N
    rule N *Int 1 => N
    rule 0 *Int _ => 0
    rule _ *Int 0 => 0

    rule N /Int 1 => N
    rule N *Int A /Int A => N

    rule 0 |Int N => N
    rule N |Int 0 => N
    rule N |Int N => N

    rule 0 &Int N => 0
    rule N &Int 0 => 0
    rule N &Int N => N

    rule N <<Int 0 => N
    rule N >>Int 0 => N

    rule (I1 +Int I2) +Int I3 => I1 +Int (I2 +Int I3) when #isConcrete(I2) andBool #isConcrete(I3)
    rule (I1 +Int I2) -Int I3 => I1 +Int (I2 -Int I3) when #isConcrete(I2) andBool #isConcrete(I3)
    rule (I1 -Int I2) +Int I3 => I1 -Int (I2 -Int I3) when #isConcrete(I2) andBool #isConcrete(I3)
    rule (I1 -Int I2) -Int I3 => I1 -Int (I2 +Int I3) when #isConcrete(I2) andBool #isConcrete(I3)

    rule I1 &Int (I2 &Int I3) => (I1 &Int I2) &Int I3 when #isConcrete(I1) andBool #isConcrete(I2)

    // 0xffff...f &Int N = N
    rule MASK &Int N => N  requires MASK ==Int (2 ^Int (log2Int(MASK) +Int 1)) -Int 1 // MASK = 0xffff...f
                            andBool 0 <=Int N andBool N <=Int MASK

    // 0xffff...f &Int N = N
    rule N &Int MASK => N  requires MASK ==Int (2 ^Int (log2Int(MASK) +Int 1)) -Int 1 // MASK = 0xffff...f
                            andBool 0 <=Int N andBool N <=Int MASK


    /// GAS Simplification
    rule (#if C #then B1 #else B2 #fi) >Int A => true
      requires B1 >Int A andBool B2 >Int A

    rule (#if C #then B1 #else B2 #fi) >=Int A => true
      requires B1 >=Int A andBool B2 >=Int A

    rule #if C #then (#if C #then B1 #else B2 #fi) -Int D #else (#if C #then B3 #else B4 #fi) -Int E #fi =>
         #if C #then B1 -Int D #else B4 -Int E #fi

    // propagate stuff out of #ifs

    rule #if C #then X #else Y #fi => Y +Int #if C #then X -Int Y #else 0 #fi
      requires #isConcrete(X)
      andBool  #isConcrete(Y)
      andBool  X >Int Y
      andBool  Y =/=Int 0

    rule #if C #then X #else Y #fi => X +Int #if C #then 0 #else Y -Int X #fi
      requires #isConcrete(X)
      andBool  #isConcrete(Y)
      andBool  Y >Int X
      andBool  X =/=Int 0

    rule #if C #then X +Int A #else X +Int B #fi => X +Int (#if C #then A #else B #fi)

    rule #if C #then (A +Int X) #else (B +Int X) #fi => ( #if C #then A #else B #fi ) +Int X

    rule #if C #then G -Int X #else G -Int Y #fi => G -Int (#if C #then X #else Y #fi)

    rule #if C #then X -Int G #else Y -Int G #fi => (#if C #then X #else Y #fi) -Int G

    rule #if C #then ((P -Int X) -Int A) #else ((Q -Int X) -Int B) #fi => (#if C #then (P -Int A) #else (Q -Int B) #fi) -Int X

    // NEW GAS LEMMAS
    // join together concrete numbers
    rule (A -Int  B) -Int C  =>  A -Int (B +Int C)
    rule (A -Int  B) +Int C  =>  A -Int (B -Int C)
    rule (A +Int B) -Int C  => A +Int (B -Int C)
    rule (A +Int B) +Int  C => A +Int (B +Int C)

    // deal with 0
    rule  A +Int (0 -Int  C) => A -Int C
      requires (notBool #isConcrete(C))
    rule  A -Int (0 -Int  C) => A +Int C
      requires (notBool #isConcrete(C))


    // deal with negative concrete number
    rule A -Int B => A +Int (0 -Int B)
      requires #isConcrete(B)
      andBool B <Int 0

    rule A +Int B => A -Int (0 -Int B)
      requires #isConcrete(B)
      andBool B <Int 0

    // SORT

    //    DIV
    rule  A -Int ( (B /Int 64)  +Int C) => (0 -Int ( (B /Int 64) -Int (A -Int C)))
      requires (notBool #isVariable(A))
      andBool (notBool #isConcrete(A))
      andBool (A =/=K (D /Int 64))
    rule  A -Int ( (B /Int 64)  -Int C) => (0 -Int ( (B /Int 64) -Int (A +Int C)))
      requires (notBool #isVariable(A))
      andBool (notBool #isConcrete(A))
      andBool (A =/=K (D /Int 64))
    rule  A +Int ( (B /Int 64) +Int  C) => (B /Int 64) +Int (A +Int  C)
      requires (notBool #isVariable(A))
      andBool (notBool #isConcrete(A))
      andBool (A =/=K (D /Int 64))
    rule  A +Int ( (B /Int 64) -Int  C) => (B /Int 64) +Int (A -Int  C)
      requires (notBool #isVariable(A))
      andBool (notBool #isConcrete(A))
      andBool (A =/=K (D /Int 64))

    //    VAR
    rule  A -Int (B  +Int C) => (0 -Int (B -Int (A -Int C)))
      requires #isVariable(B)
      andBool (notBool #isVariable(A))
      andBool (A =/=K 0)
    rule  A -Int (B  -Int C) => (0 -Int (B -Int (A +Int C)))
      requires #isVariable(B)
      andBool (notBool #isVariable(A))
      andBool (A =/=K 0)
    rule  A +Int (B +Int  C) => B +Int (A +Int  C)
      requires #isVariable(B)
      andBool (notBool #isVariable(A))
      andBool (A =/=K 0)
    rule  A +Int (B -Int  C) => B +Int (A -Int  C)
      requires #isVariable(B)
      andBool (notBool #isVariable(A))
      andBool (A =/=K 0)

    //    CONCRETE
    rule  A -Int (B  +Int C) => (0 -Int (B -Int (A -Int C)))
      requires #isConcrete(A)
      andBool A =/=Int 0
      andBool (notBool #isConcrete(B))
    rule  A -Int (B  -Int C) => (0 -Int (B -Int (A +Int C)))
      requires #isConcrete(A)
      andBool A =/=Int 0
      andBool (notBool #isConcrete(B))
    rule  A +Int (B +Int  C) => B +Int (A +Int  C)
      requires #isConcrete(A)
      andBool (notBool #isConcrete(B))
    rule  A +Int (B -Int  C) => B +Int (A -Int  C)
      requires #isConcrete(A)
      andBool (notBool #isConcrete(B))

    // SOLVE
    //    duplicates
    rule A -Int (A +Int B) => 0 -Int B
    rule A -Int (A -Int B) => B
    rule A -Int (B +Int (A +Int C)) => 0 -Int (B +Int C)
    rule A -Int (B +Int (A -Int C)) => 0 -Int (B -Int C)

    //    concrete
    rule  A -Int (B  -Int C) => (A -Int  B) +Int C
      requires #isConcrete(A)
      andBool  #isConcrete(B)
    rule  A -Int (B  +Int C) => (A -Int  B) -Int C
      requires #isConcrete(A)
      andBool  #isConcrete(B)
    rule  A +Int (B -Int  C) => (A +Int  B) -Int C
      requires #isConcrete(A)
      andBool  #isConcrete(B)
    rule  A +Int (B +Int  C) => (A +Int  B) +Int C
      requires #isConcrete(A)
      andBool  #isConcrete(B)



    /// ---


    rule A -Int A => 0

    rule bool2Word(A) |Int bool2Word(B) => bool2Word(A  orBool B)
    rule bool2Word(A) &Int bool2Word(B) => bool2Word(A andBool B)

    rule bool2Word(A)  ==K 0 => notBool(A)
    rule bool2Word(A)  ==K 1 => A

    rule 1 |Int bool2Word(X) => 1
    rule  bool2Word(X) |Int 1 => 1
    rule 1 &Int bool2Word(X) => bool2Word(X)
    rule bool2Word(X) &Int 1 => bool2Word(X)

    rule chop(bool2Word(B)) => bool2Word(B)





    rule 0 <=Int chop(V)             => true
    rule         chop(V) <Int pow256 => true

    rule 0 <=Int keccak(V)             => true
    rule         keccak(V) <Int pow256 => true

    rule 0 <=Int X &Int Y             => true requires 0 <=Int X andBool X <Int pow256 andBool 0 <=Int Y andBool Y <Int pow256
    rule         X &Int Y <Int pow256 => true requires 0 <=Int X andBool X <Int pow256 andBool 0 <=Int Y andBool Y <Int pow256





    rule chop(I) => I requires 0 <=Int I andBool I <Int pow256




    rule #sizeWordStack ( _ , _ ) >=Int 0 => true [smt-lemma]
    rule #sizeWordStack ( WS , N:Int )
      => #sizeWordStack ( WS , 0 ) +Int N
      requires N =/=K 0
      [lemma]

rule chop(#unsigned(W)) => #unsigned(W)
  requires #rangeSInt(256, W)

rule #signed(#unsigned(W)) => W
  requires #rangeSInt(256, W)

rule #unsigned(#signed(W)) => W
  requires #rangeUInt(256, W)

rule W0 s<Word W1 => #signed(W0) <Word #signed(W1)

rule   #signed(X) ==K   #signed(Y) => X ==K Y requires #rangeUInt(256,X) orBool #rangeUInt(256,Y)
rule #unsigned(X) ==K #unsigned(Y) => X ==K Y requires #rangeSInt(256,X) orBool #rangeSInt(256,Y)


rule A modInt pow160 => A
  requires #rangeAddress(A)

syntax Bool ::= #notPrecompileAddress ( Int ) [function]
// ---------------------------------------
rule #notPrecompileAddress ( X ) => 0 <Int X andBool 9 <=Int X andBool #rangeAddress(X)

// ABSTRACT SEMANTICS.k

  rule <k> LT W0 W1 => bool2Word(W0  <Int W1) ~> #push ... </k> [trusted]
  rule <k> GT W0 W1 => bool2Word(W0  >Int W1) ~> #push ... </k> [trusted]
  rule <k> EQ W0 W1 => bool2Word(W0 ==Int W1) ~> #push ... </k> [trusted]
  rule <k> ISZERO W => bool2Word(W  ==Int 0 ) ~> #push ... </k> [trusted]


//RULES MUST USE ==K and not ==Int
//Warning: assumes injective hashing
rule keccakIntList(A B .IntList) ==K keccakIntList(C D .IntList) => A ==Int C andBool B ==Int D

rule keccakIntList(A B C .IntList) ==K keccakIntList(D E F .IntList) => A ==Int D andBool B ==Int E andBool C ==Int F


rule keccakIntList(C) ==K A => false
     requires 0 <=Int A andBool A <=Int 20

rule keccakIntList(C) +Int B ==K A => false
     requires 0 <=Int A andBool A <=Int 20
     andBool 0 <=Int B andBool B <=Int 20

rule A ==K keccakIntList(C) +Int B => false
     requires 0 <=Int A andBool A <=Int 20
     andBool 0 <=Int B andBool B <=Int 20

rule keccakIntList(C) +Int B ==K keccakIntList(A) => false
     requires 0 <=Int B andBool B <=Int 20

rule keccakIntList(A) +Int B ==K keccakIntList(A) +Int C => false
     requires B =/=Int C

rule keccakIntList(A) +Int B ==K keccakIntList(C) +Int D => false
     requires B =/=K C


rule keccakIntList(A) ==K keccakIntList(C) +Int B => false
     requires 0 <=Int B andBool B <=Int 20


rule A ==K keccakIntList(C) => false
     requires 0 <=Int A andBool A <=Int 20

rule Cgascap(SCHED, GCAP, GAVAIL, GEXTRA) => #if GAVAIL <Int GEXTRA orBool Gstaticcalldepth << SCHED >> #then GCAP #else minInt(#allBut64th(GAVAIL -Int GEXTRA), GCAP) #fi

rule Csstore(SCHED, NEW, CURR, ORIG)
  => #if CURR ==Int NEW orBool ORIG =/=Int CURR #then Gsload < SCHED > #else #if ORIG ==Int 0 #then Gsstoreset < SCHED > #else Gsstorereset < SCHED > #fi #fi
  requires Ghasdirtysstore << SCHED >>

rule Csstore(SCHED, NEW, CURR, ORIG)
  => #if CURR ==Int 0 andBool NEW =/=Int 0 #then Gsstoreset < SCHED > #else Gsstorereset < SCHED > #fi
  requires notBool Ghasdirtysstore << SCHED >>

rule Rsstore(SCHED, NEW, CURR, ORIG) => #if CURR =/=Int 0 andBool NEW ==Int 0 #then Rsstoreclear < SCHED > #else 0 #fi
      requires notBool Ghasdirtysstore << SCHED >>

rule Cextra(SCHED, ISEMPTY, VALUE) => Gcall < SCHED > +Int Cnew(SCHED, ISEMPTY, VALUE) +Int Cxfer(SCHED, VALUE)

rule Cmem(SCHED, N) => (N *Int Gmemory < SCHED >) +Int ((N *Int N) /Int Gquadcoeff < SCHED >)

//Symbolic wrapper over the argument of #ecrec, no implementation.
//                         hash v  r   s
syntax Int ::= #symEcrec ( Int , Int , Int , Int ) [function]

rule <k> ECREC => #end EVMC_SUCCESS ... </k>
       <callData> DATA </callData>
       <output> _ => #ecrec(#symEcrec(#asWord(#take(32, DATA)), #asWord(#take(32, #drop(32, DATA))), #asWord(#take(32, #drop(64, DATA))), #asWord(#take(32, #drop(96, DATA))))) </output>
    requires notBool #isConcrete(DATA) andBool #sizeWordStack(DATA) ==Int 128
[trusted]

rule #memoryUsageUpdate(MU, START, WIDTH) => maxInt(MU, (START +Int WIDTH) up/Int 32) requires WIDTH  >Int 0
